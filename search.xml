<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序</title>
      <link href="/2023/01/12/%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/01/12/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-06：排序"><a href="#数据结构课内OJ-06：排序" class="headerlink" title="数据结构课内OJ 06：排序"></a>数据结构课内OJ 06：排序</h1><h2 id="【id-142】【10分】A-DS内排—直插排序"><a href="#【id-142】【10分】A-DS内排—直插排序" class="headerlink" title="【id:142】【10分】A. DS内排—直插排序"></a>【id:142】【10分】A. DS内排—直插排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;arr[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> temp=arr[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;temp)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=i;k&gt;j;k--)&#123;</span><br><span class="line">                        arr[k]=arr[k<span class="number">-1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[j]=temp;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-139】【10分】B-DS排序–希尔排序"><a href="#【id-139】【10分】B-DS排序–希尔排序" class="headerlink" title="【id:139】【10分】B. DS排序–希尔排序"></a>【id:139】【10分】B. DS排序–希尔排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> arr[n];</span><br><span class="line">        <span class="built_in">memset</span>(arr,<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">        <span class="type">int</span> len = (n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(len)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-len;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=len;j+i&lt;n;j+=j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[i]&lt;arr[i+j])<span class="built_in">swap</span>(arr[i],arr[i+j]);</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout&lt;&lt;arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            len=len/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t)cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-140】【10分】C-DS排序–快速排序"><a href="#【id-140】【10分】C-DS排序–快速排序" class="headerlink" title="【id:140】【10分】C. DS排序–快速排序"></a>【id:140】【10分】C. DS排序–快速排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quick_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> be,<span class="type">int</span> en,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(en-be&gt;<span class="number">0</span>)        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i=be,j=en,flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=arr[i];</span><br><span class="line">                arr[i]=arr[j];</span><br><span class="line">                arr[j]=temp;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    j--;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!flag)j--;</span><br><span class="line">                <span class="keyword">else</span> i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)   </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Quick_sort</span>(arr,be,i<span class="number">-1</span>,n);</span><br><span class="line">        <span class="built_in">Quick_sort</span>(arr,i+<span class="number">1</span>,en,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="type">int</span> n,arr[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">        <span class="built_in">Quick_sort</span>(arr,<span class="number">0</span>,n<span class="number">-1</span>,n);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-147】【10分】D-大数据量的冒泡排序-计次数"><a href="#【id-147】【10分】D-大数据量的冒泡排序-计次数" class="headerlink" title="【id:147】【10分】D. 大数据量的冒泡排序 (计次数)"></a>【id:147】【10分】D. 大数据量的冒泡排序 (计次数)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="type">int</span> arr[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="built_in">swap</span>(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-624】【5分】E-奥运排行榜"><a href="#【id-624】【5分】E-奥运排行榜" class="headerlink" title="【id:624】【5分】E. 奥运排行榜"></a>【id:624】【5分】E. 奥运排行榜</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Contry</span>&#123;</span><br><span class="line">    <span class="type">int</span> golden;</span><br><span class="line">    <span class="type">int</span> medal;</span><br><span class="line">    <span class="type">double</span> gp;</span><br><span class="line">    <span class="type">double</span> mp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    Contry contry[n];</span><br><span class="line">    <span class="type">int</span> pop;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt; contry[i].golden &gt;&gt; contry[i].medal &gt;&gt; pop;</span><br><span class="line">        contry[i].gp = (<span class="type">double</span>)contry[i].golden / pop;</span><br><span class="line">        contry[i].mp = (<span class="type">double</span>)contry[i].medal / pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> a;cin&gt;&gt;a;</span><br><span class="line">        <span class="type">int</span> rank=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> way[<span class="number">4</span>]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(contry[j].golden&gt;=contry[a].golden&amp;&amp;j!=a)way[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(contry[j].medal&gt;=contry[a].medal&amp;&amp;j!=a)way[<span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(contry[j].gp&gt;=contry[a].gp&amp;&amp;j!=a)way[<span class="number">2</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(contry[j].mp&gt;=contry[a].mp&amp;&amp;j!=a)way[<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rway=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(way[i]&lt;way[rway<span class="number">-1</span>])rway = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;way[rway<span class="number">-1</span>]&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;rway;</span><br><span class="line">        <span class="keyword">if</span>(m)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-711】【5分】F-与零交换"><a href="#【id-711】【5分】F-与零交换" class="headerlink" title="【id:711】【5分】F. 与零交换"></a>【id:711】【5分】F. 与零交换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">complete</span><span class="params">(<span class="type">int</span> *arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]!=i)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;arr[j]!=i;j++);</span><br><span class="line">                <span class="built_in">swap</span>(arr[i],arr[j]);</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">complete</span>(arr))<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]!=i)<span class="built_in">swap</span>(arr[<span class="number">0</span>],arr[i]);</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-141】【10分】G-DS内排—堆排序"><a href="#【id-141】【10分】G-DS内排—堆排序" class="headerlink" title="【id:141】【10分】G. DS内排—堆排序"></a>【id:141】【10分】G. DS内排—堆排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    Node *left,*right;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;</span><br><span class="line">        v=<span class="number">0</span>;</span><br><span class="line">        left= <span class="literal">nullptr</span>;</span><br><span class="line">        right= <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node *root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(Node *p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cc=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">while</span> (cc--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right)<span class="built_in">pre</span>(p-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;left)<span class="built_in">pre</span>(p-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;left&amp;&amp;!p-&gt;right&amp;&amp;p-&gt;v&gt;p-&gt;left-&gt;v)&#123;</span><br><span class="line">            <span class="type">int</span> t=p-&gt;left-&gt;v;</span><br><span class="line">            p-&gt;left-&gt;v=p-&gt;v;</span><br><span class="line">            p-&gt;v=t;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;right&amp;&amp;!p-&gt;left&amp;&amp;p-&gt;v&gt;p-&gt;right-&gt;v)&#123;</span><br><span class="line">            <span class="type">int</span> t=p-&gt;right-&gt;v;</span><br><span class="line">            p-&gt;right-&gt;v=p-&gt;v;</span><br><span class="line">            p-&gt;v=t;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;left&amp;&amp;p-&gt;right&amp;&amp;p-&gt;v&gt;p-&gt;left-&gt;v&amp;&amp;p-&gt;right-&gt;v&gt;p-&gt;left-&gt;v)&#123;</span><br><span class="line">            <span class="type">int</span> t=p-&gt;left-&gt;v;</span><br><span class="line">            p-&gt;left-&gt;v=p-&gt;v;</span><br><span class="line">            p-&gt;v=t;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;left&amp;&amp;p-&gt;right&amp;&amp;p-&gt;v&gt;p-&gt;right-&gt;v&amp;&amp;p-&gt;left-&gt;v&gt;p-&gt;right-&gt;v)&#123;</span><br><span class="line">            <span class="type">int</span> t=p-&gt;right-&gt;v;</span><br><span class="line">            p-&gt;right-&gt;v=p-&gt;v;</span><br><span class="line">            p-&gt;v=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    Node **dui=<span class="keyword">new</span> Node*[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        dui[i]=<span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        cin&gt;&gt;dui[i]-&gt;v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>;<span class="type">int</span> end=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> (count--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(front&lt;n&amp;&amp;end&lt;n)&#123;</span><br><span class="line">            dui[front]-&gt;left=dui[end];end++;</span><br><span class="line">            <span class="keyword">if</span>(front&lt;n&amp;&amp;end&lt;n)dui[front]-&gt;right=dui[end];end++;front++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span> &gt;d;</span><br><span class="line">    <span class="type">int</span> u=n;<span class="type">int</span> nn=n;</span><br><span class="line">    <span class="keyword">while</span> (u--)&#123;</span><br><span class="line"></span><br><span class="line">        root=dui[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">pre</span>(root);</span><br><span class="line">        cout&lt;&lt;nn&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(u==nn<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; ++i) cout&lt;&lt;dui[i]-&gt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;dui[n<span class="number">-1</span>]-&gt;v&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cout&lt;&lt;dui[i]-&gt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = d.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)cout&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;d[i]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t=dui[<span class="number">0</span>]-&gt;v;</span><br><span class="line">        dui[<span class="number">0</span>]-&gt;v=dui[n<span class="number">-1</span>]-&gt;v;</span><br><span class="line">        dui[n<span class="number">-1</span>]-&gt;v=t;</span><br><span class="line">        d.<span class="built_in">push_back</span>(dui[n<span class="number">-1</span>]-&gt;v);</span><br><span class="line">        dui[n<span class="number">-1</span>]-&gt;v=<span class="number">999</span>;n--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-145】【10分】H-DS内排—2-路归并排序"><a href="#【id-145】【10分】H-DS内排—2-路归并排序" class="headerlink" title="【id:145】【10分】H. DS内排—2-路归并排序"></a>【id:145】【10分】H. DS内排—2-路归并排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(string a,string b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        string s[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;s[i];</span><br><span class="line">        <span class="type">int</span> k=<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> ck=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(k+ck&lt;=n)&#123;</span><br><span class="line">                <span class="built_in">sort</span>(&amp;s[ck],&amp;s[ck]+k,cmp);</span><br><span class="line">                ck+=k;</span><br><span class="line">            &#125;</span><br><span class="line">            k*=<span class="number">2</span>;ck=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout&lt;&lt;s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s,s+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-148】【10分】I-基数排序（内部排序）"><a href="#【id-148】【10分】I-基数排序（内部排序）" class="headerlink" title="【id:148】【10分】I. 基数排序（内部排序）"></a>【id:148】【10分】I. 基数排序（内部排序）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RS</span>&#123;</span><br><span class="line">    <span class="type">int</span> *array,max;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; r[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RS</span>(<span class="type">int</span> n);</span><br><span class="line">    ~<span class="built_in">RS</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Max</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Distribute</span><span class="params">(<span class="type">int</span> wei)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Collect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RS::<span class="built_in">RS</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    len=n;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;array[i];</span><br><span class="line">    <span class="built_in">Max</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RS::~<span class="built_in">RS</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> []array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RS::Max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>,temp=array[i];</span><br><span class="line">        <span class="keyword">while</span> (temp/<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp/=<span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;max)max=count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RS::Sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Distribute</span>(i);</span><br><span class="line">        <span class="built_in">Collect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RS::Distribute</span><span class="params">(<span class="type">int</span> wei)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=array[i]/<span class="built_in">pow</span>(<span class="number">10</span>,wei<span class="number">-1</span>);</span><br><span class="line">        j=j%<span class="number">10</span>;</span><br><span class="line">        r[j].<span class="built_in">push</span>(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RS::Collect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(r[i].<span class="built_in">empty</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!r[i].<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;r[i].<span class="built_in">front</span>();</span><br><span class="line">                array[cnt++]=r[i].<span class="built_in">front</span>();</span><br><span class="line">                r[i].<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-&gt;^&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;array[i];</span><br><span class="line">        <span class="keyword">if</span>(i!=len<span class="number">-1</span>)cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        <span class="function">RS <span class="title">rs</span><span class="params">(n)</span></span>;</span><br><span class="line">        rs.<span class="built_in">Sort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-708】【10分】J-插入排序还是归并排序"><a href="#【id-708】【10分】J-插入排序还是归并排序" class="headerlink" title="【id:708】【10分】J. 插入排序还是归并排序"></a>【id:708】【10分】J. 插入排序还是归并排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>],b[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;b[i];</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>&amp;&amp;b[i]&lt;=b[i+<span class="number">1</span>];i++);</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n&amp;&amp;b[j]==a[j];j++);</span><br><span class="line"><span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Insertion Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(a,a+i+<span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Merge Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> idi=<span class="number">1</span>,flag =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(a[i]!=b[i]) flag = <span class="number">1</span>;</span><br><span class="line">idi = idi&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/idi;i++)<span class="built_in">sort</span>(a+i*idi,a+(i+<span class="number">1</span>)*idi);</span><br><span class="line"><span class="built_in">sort</span>(a+n/idi*idi,a+n);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; a[i] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-673】【5分】K-关于堆的判断"><a href="#【id-673】【5分】K-关于堆的判断" class="headerlink" title="【id:673】【5分】K. 关于堆的判断"></a>【id:673】【5分】K. 关于堆的判断</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>; </span><br><span class="line"><span class="type">int</span> get[N], pre[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> height[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">built</span> <span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; height[u] &lt; height[u / <span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span> (height[u], height[u / <span class="number">2</span>]);</span><br><span class="line">u /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">height[++ cnt] = x;</span><br><span class="line"><span class="built_in">built</span> (i);</span><br><span class="line">&#125; </span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) map[height[i]] = i;</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">string s; cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">&quot;is&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string s2; cin &gt;&gt; s2;</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="string">&quot;the&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string s3; cin &gt;&gt; s3;</span><br><span class="line"><span class="keyword">if</span> (s3 == <span class="string">&quot;root&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[x] == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string s4; <span class="type">int</span> x2;</span><br><span class="line">cin &gt;&gt; s4 &gt;&gt; x2;</span><br><span class="line"><span class="keyword">if</span> (map[x] == map[x2] / <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string s3, s4;<span class="type">int</span> x2;</span><br><span class="line">cin &gt;&gt; s3 &gt;&gt; s4 &gt;&gt; x2;</span><br><span class="line"><span class="keyword">if</span> (map[x] / <span class="number">2</span> == map[x2])</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x2;</span><br><span class="line">string s2, s3;</span><br><span class="line">cin &gt;&gt; x2 &gt;&gt; s2 &gt;&gt; s3;</span><br><span class="line"><span class="keyword">if</span> (map[x] / <span class="number">2</span> == map[x2] / <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;F&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【id-709】【5分】L-寻找大富翁"><a href="#【id-709】【5分】L-寻找大富翁" class="headerlink" title="【id:709】【5分】L. 寻找大富翁"></a>【id:709】【5分】L. 寻找大富翁</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;arr[i];</span><br><span class="line">    <span class="built_in">sort</span>(arr,arr+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;n-m<span class="number">-1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=n<span class="number">-1</span>)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="/2023/01/12/%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/01/12/%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-05：查找：静态查找-amp-amp-动态查找-amp-amp-哈希查找"><a href="#数据结构课内OJ-05：查找：静态查找-amp-amp-动态查找-amp-amp-哈希查找" class="headerlink" title="数据结构课内OJ 05：查找：静态查找&amp;&amp;动态查找&amp;&amp;哈希查找"></a>数据结构课内OJ 05：查找：静态查找&amp;&amp;动态查找&amp;&amp;哈希查找</h1><h2 id="静态查找"><a href="#静态查找" class="headerlink" title="静态查找"></a>静态查找</h2><h3 id="【id-124】【25分】A-DS静态查找之顺序查找"><a href="#【id-124】【25分】A-DS静态查找之顺序查找" class="headerlink" title="【id:124】【25分】A. DS静态查找之顺序查找"></a>【id:124】【25分】A. DS静态查找之顺序查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;a[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=n;a[i]!=a[<span class="number">0</span>];i--);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-125】【25分】B-DS静态查找之折半查找"><a href="#【id-125】【25分】B-DS静态查找之折半查找" class="headerlink" title="【id:125】【25分】B. DS静态查找之折半查找"></a>【id:125】【25分】B. DS静态查找之折半查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;  </span><br><span class="line">    <span class="type">int</span> *e; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">List</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">List</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        size = n;</span><br><span class="line">        e = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; e[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = size - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (high + low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (e[mid] == key)<span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (e[mid] &gt; key)high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">List</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, t, k;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">List <span class="title">l</span><span class="params">(n)</span></span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (l.<span class="built_in">Binary_Search</span>(n, k) == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; l.<span class="built_in">Binary_Search</span>(n, k) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-126】【25分】C-DS静态查找之顺序索引查找"><a href="#【id-126】【25分】C-DS静态查找之顺序索引查找" class="headerlink" title="【id:126】【25分】C. DS静态查找之顺序索引查找"></a>【id:126】【25分】C. DS静态查找之顺序索引查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">50</span>][<span class="number">50</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> fi,cnt = <span class="number">0</span>; </span><br><span class="line">cin&gt;&gt;fi;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(fi &gt; a[i][<span class="number">0</span>][<span class="number">0</span>]) &#123; </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; ; j++) &#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(fi == a[i][j][<span class="number">0</span>]) &#123;</span><br><span class="line">cout&lt;&lt;a[i][j][<span class="number">1</span>]+<span class="number">1</span>&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(a[i][j][<span class="number">0</span>] == <span class="number">0</span>)&#123; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;error\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,*arr;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="type">int</span>[n+<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">cin&gt;&gt;a[i][<span class="number">0</span>][<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt;= a[j][<span class="number">0</span>][<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j][x][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">a[j][x][<span class="number">0</span>] = arr[i];</span><br><span class="line">a[j][x][<span class="number">1</span>] = i; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">search</span>(n,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []arr;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-135】【10分】D-DS查找——折半查找求平方根"><a href="#【id-135】【10分】D-DS查找——折半查找求平方根" class="headerlink" title="【id:135】【10分】D. DS查找——折半查找求平方根"></a>【id:135】【10分】D. DS查找——折半查找求平方根</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">double</span> num;</span><br><span class="line"><span class="type">double</span> low,high;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">double</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid*mid-num&lt;<span class="number">0.00001</span> &amp;&amp; mid*mid-num&gt;<span class="number">-0.00001</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,mid);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mid*mid&gt;num)&#123;</span><br><span class="line">            high=mid;</span><br><span class="line">            <span class="built_in">search</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid*mid&lt;num)&#123;</span><br><span class="line">            low=mid;</span><br><span class="line">            <span class="built_in">search</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        low=<span class="number">0</span>,high=num;</span><br><span class="line">        <span class="built_in">search</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-637】【10分】E-两个有序序列的中位数"><a href="#【id-637】【10分】E-两个有序序列的中位数" class="headerlink" title="【id:637】【10分】E. 两个有序序列的中位数"></a>【id:637】【10分】E. 两个有序序列的中位数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>*n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">2</span>*n);</span><br><span class="line">    cout&lt;&lt;a[(<span class="number">2</span>*n<span class="number">-1</span>)/<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-748】【5分】F-链表的有序构建和查找"><a href="#【id-748】【5分】F-链表的有序构建和查找" class="headerlink" title="【id:748】【5分】F. 链表的有序构建和查找"></a>【id:748】【5分】F. 链表的有序构建和查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n],max=<span class="number">-1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;max)max=a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;max)cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;非空指针变化&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        cin&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(b&lt;<span class="number">1</span>||b&gt;n)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;a[b<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态查找"><a href="#动态查找" class="headerlink" title="动态查找"></a>动态查找</h2><h3 id="【id-127】【30分】A-DS二叉排序树之创建和插入"><a href="#【id-127】【30分】A-DS二叉排序树之创建和插入" class="headerlink" title="【id:127】【30分】A. DS二叉排序树之创建和插入"></a>【id:127】【30分】A. DS二叉排序树之创建和插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="type">int</span> a;cin&gt;&gt;a;</span><br><span class="line">            s.<span class="built_in">insert</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> nn;cin&gt;&gt;nn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span>(nn--)&#123;</span><br><span class="line">            <span class="type">int</span> b;cin&gt;&gt;b;</span><br><span class="line">            s.<span class="built_in">insert</span>(b);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">                cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-128】【20分】B-DS二叉排序树之查找"><a href="#【id-128】【20分】B-DS二叉排序树之查找" class="headerlink" title="【id:128】【20分】B. DS二叉排序树之查找"></a>【id:128】【20分】B. DS二叉排序树之查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;                      </span><br><span class="line">    Node *lChild, *rChild; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> e) : <span class="built_in">data</span>(e), <span class="built_in">lChild</span>(<span class="literal">NULL</span>), <span class="built_in">rChild</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *root;</span><br><span class="line">    <span class="type">int</span> c; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InsNode</span><span class="params">(<span class="type">int</span> data, Node *&amp;r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data &gt; r-&gt;data &amp;&amp; r-&gt;rChild)<span class="built_in">InsNode</span>(data, r-&gt;rChild);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; r-&gt;data &amp;&amp; r-&gt;lChild)<span class="built_in">InsNode</span>(data, r-&gt;lChild);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; r-&gt;data &amp;&amp; !r-&gt;rChild)</span><br><span class="line">        &#123;</span><br><span class="line">            Node *s = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            r-&gt;rChild = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; r-&gt;data &amp;&amp; !r-&gt;lChild)</span><br><span class="line">        &#123;</span><br><span class="line">            Node *s = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            r-&gt;lChild = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(Node *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">InOrder</span>(t-&gt;lChild);</span><br><span class="line">            cout &lt;&lt; t-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">InOrder</span>(t-&gt;rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> k, Node *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; t-&gt;data &amp;&amp; t-&gt;rChild)</span><br><span class="line">        &#123;</span><br><span class="line">            c++;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Delete</span>(k, t-&gt;rChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; t-&gt;data &amp;&amp; t-&gt;lChild)</span><br><span class="line">        &#123;</span><br><span class="line">            c++;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Delete</span>(k, t-&gt;lChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k == t-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            c++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>(<span class="type">int</span> data) &#123; root = <span class="keyword">new</span> <span class="built_in">Node</span>(data); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">InsNode</span>(k, root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(root);</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Delete</span>(k, root))cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="type">int</span> n, m,data;</span><br><span class="line">        cin &gt;&gt; n&gt;&gt; data;</span><br><span class="line">        <span class="function">BiTree <span class="title">bt</span><span class="params">(data)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line">            bt.<span class="built_in">Insert</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">        bt.<span class="built_in">InOrder</span>();</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> key;cin &gt;&gt; key;</span><br><span class="line">            bt.<span class="built_in">Delete</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-129】【20分】C-DS二叉排序树之删除"><a href="#【id-129】【20分】C-DS二叉排序树之删除" class="headerlink" title="【id:129】【20分】C. DS二叉排序树之删除"></a>【id:129】【20分】C. DS二叉排序树之删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;                      </span><br><span class="line">    Node *lChild, *rChild; </span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> e) : <span class="built_in">data</span>(e), <span class="built_in">lChild</span>(<span class="literal">NULL</span>), <span class="built_in">rChild</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *root;</span><br><span class="line">    <span class="type">int</span> c; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InsNode</span><span class="params">(<span class="type">int</span> data, Node *&amp;r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data &gt; r-&gt;data &amp;&amp; r-&gt;rChild)<span class="built_in">InsNode</span>(data, r-&gt;rChild);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; r-&gt;data &amp;&amp; r-&gt;lChild)<span class="built_in">InsNode</span>(data, r-&gt;lChild);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; r-&gt;data &amp;&amp; !r-&gt;rChild)</span><br><span class="line">        &#123;</span><br><span class="line">            Node *s = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            r-&gt;rChild = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; r-&gt;data &amp;&amp; !r-&gt;lChild)</span><br><span class="line">        &#123;</span><br><span class="line">            Node *s = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            r-&gt;lChild = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(Node *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">InOrder</span>(t-&gt;lChild);</span><br><span class="line">            cout &lt;&lt; t-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">InOrder</span>(t-&gt;rChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> k, Node *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    Node *temp, *previous;</span><br><span class="line">    temp = t;</span><br><span class="line">    previous = t;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;data == k)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp-&gt;data &gt; k)</span><br><span class="line">            &#123;</span><br><span class="line">                previous = temp;</span><br><span class="line">                temp = temp-&gt;lChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                previous = temp;</span><br><span class="line">                temp = temp-&gt;rChild;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;lChild == <span class="literal">NULL</span>)        </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp==t &amp;&amp; temp-&gt;rChild==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    temp=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    previous-&gt;lChild==temp ? previous-&gt;lChild=temp-&gt;rChild :previous-&gt;rChild=temp-&gt;rChild;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (temp-&gt;rChild == <span class="literal">NULL</span>)        </span><br><span class="line">&#123;</span><br><span class="line">    previous-&gt;lChild == temp ? previous-&gt;lChild=temp-&gt;lChild :previous-&gt;rChild=temp-&gt;lChild;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>                           </span><br><span class="line">&#123;</span><br><span class="line">Node *right_min = temp-&gt;rChild;</span><br><span class="line">previous = right_min;</span><br><span class="line"><span class="keyword">while</span> (right_min-&gt;lChild != <span class="literal">NULL</span>)      </span><br><span class="line">&#123;</span><br><span class="line">    previous = right_min;</span><br><span class="line">right_min = right_min-&gt;lChild;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;data = right_min-&gt;data;            </span><br><span class="line"><span class="keyword">if</span>(right_min == previous)</span><br><span class="line">            &#123;</span><br><span class="line">                temp-&gt;rChild=right_min-&gt;rChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                previous-&gt;lChild = right_min-&gt;rChild;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">delete</span> right_min;               </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>(<span class="type">int</span> data) &#123; root = <span class="keyword">new</span> <span class="built_in">Node</span>(data); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">InsNode</span>(k, root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(root);</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Delete</span>(k, root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="type">int</span> n, m,data;</span><br><span class="line">        cin &gt;&gt; n&gt;&gt; data;</span><br><span class="line">        <span class="function">BiTree <span class="title">bt</span><span class="params">(data)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; data;</span><br><span class="line">            bt.<span class="built_in">Insert</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">        bt.<span class="built_in">InOrder</span>();</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> key;cin &gt;&gt; key;</span><br><span class="line">            bt.<span class="built_in">Delete</span>(key);</span><br><span class="line">            bt.<span class="built_in">InOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-133】【10分】D-DS查找—二叉树平衡因子"><a href="#【id-133】【10分】D-DS查找—二叉树平衡因子" class="headerlink" title="【id:133】【10分】D. DS查找—二叉树平衡因子"></a>【id:133】【10分】D. DS查找—二叉树平衡因子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">char</span> *c,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c[n] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">1</span>)&gt;<span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">2</span>) ? <span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">1</span>) + <span class="number">1</span>: <span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">char</span> *c,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c[n] == <span class="string">&#x27;0&#x27;</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">Print</span>(c,n*<span class="number">2</span>+<span class="number">1</span>);<span class="built_in">Print</span>(c,n*<span class="number">2</span>+<span class="number">2</span>);</span><br><span class="line">cout&lt;&lt;c[n]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">1</span>) - <span class="built_in">h</span>(c,n*<span class="number">2</span>+<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="type">char</span> *c;</span><br><span class="line"><span class="type">int</span> a=<span class="number">2</span>,n;cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(a/<span class="number">2</span> &lt; n)a*=<span class="number">2</span>;</span><br><span class="line">c = <span class="keyword">new</span> <span class="type">char</span>[a+<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &lt; a; i++)c[i] = <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line"><span class="built_in">Print</span>(c,<span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-672】【10分】E-搜索树判断"><a href="#【id-672】【10分】E-搜索树判断" class="headerlink" title="【id:672】【10分】E. 搜索树判断"></a>【id:672】【10分】E. 搜索树判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">      <span class="type">int</span> data;</span><br><span class="line">      <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *left;</span><br><span class="line">      <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *right;</span><br><span class="line">&#125;TreeNode,*tree;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;pos;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ftree</span><span class="params">(<span class="type">int</span> fr,<span class="type">int</span> en,<span class="type">int</span> p[])</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(en&gt;=fr)&#123;</span><br><span class="line">            <span class="type">int</span> root = p[fr];</span><br><span class="line">            <span class="type">int</span> a = fr+<span class="number">1</span>,b = en;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root&gt;p[a]&amp;&amp;a&lt;=b)a++;</span><br><span class="line">            <span class="keyword">while</span>(root&lt;=p[b]&amp;&amp;b&gt;=a)b--;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(root&lt;=p[a]&amp;&amp;a&lt;=b)a++;</span><br><span class="line">            <span class="keyword">while</span>(root&gt;p[b]&amp;&amp;b&gt;=a)b--;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">ftree</span>(fr+<span class="number">1</span>,b,p);  </span><br><span class="line">         <span class="built_in">ftree</span>(a,en,p);    </span><br><span class="line">         pos.<span class="built_in">push_back</span>(root); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> p[<span class="number">1000</span>];</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;p[i];</span><br><span class="line">     <span class="built_in">ftree</span>(<span class="number">0</span>,n<span class="number">-1</span>,p);</span><br><span class="line">     <span class="keyword">if</span>(pos.<span class="built_in">size</span>()!=n)&#123;        </span><br><span class="line">         flag = <span class="literal">false</span>;</span><br><span class="line">         pos.<span class="built_in">clear</span>();         </span><br><span class="line">         <span class="built_in">ftree</span>(<span class="number">0</span>,n<span class="number">-1</span>,p); </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(pos.<span class="built_in">size</span>()==n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl&lt;&lt;pos[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;pos.<span class="built_in">size</span>();j++)cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;pos[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-720】【10分】F-二叉搜索树的最近公共祖先"><a href="#【id-720】【10分】F-二叉搜索树的最近公共祖先" class="headerlink" title="【id:720】【10分】F. 二叉搜索树的最近公共祖先"></a>【id:720】【10分】F. 二叉搜索树的最近公共祖先</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>* BiTree;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,cnt,a[<span class="number">1000</span>],b[<span class="number">1000</span>];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line">BiTree left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">&#125;tree[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BiTree <span class="title">build</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> loc,<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">BiTree T = &amp;tree[cnt++];</span><br><span class="line">T-&gt;key = a[loc];</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">m = <span class="built_in">lower_bound</span>(b+m+start,b+len+start,a[loc])-b-start;</span><br><span class="line">T-&gt;left = <span class="built_in">build</span>(m,loc+<span class="number">1</span>,start);</span><br><span class="line">T-&gt;right= <span class="built_in">build</span>(len-m<span class="number">-1</span>,loc+m+<span class="number">1</span>,start+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ansl</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,BiTree Tr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;Tr-&gt;key&amp;&amp;y&gt;Tr-&gt;key)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ansl</span>(x,y,Tr-&gt;right);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&lt;Tr-&gt;key&amp;&amp;y&lt;Tr-&gt;key)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ansl</span>(x,y,Tr-&gt;left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Tr-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">BiTree t;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">a[i]=b[i];</span><br><span class="line">mapp[a[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b,b+n);</span><br><span class="line">t = <span class="built_in">build</span>(n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> u,v,fi;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line"><span class="keyword">if</span>(mapp[u]==<span class="number">0</span>&amp;&amp;mapp[v]==<span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;ERROR: &quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot; and &quot;</span>&lt;&lt;v&lt;&lt;<span class="string">&quot; are not found.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mapp[u]==<span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;ERROR: &quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot; is not found.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mapp[v]==<span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;ERROR: &quot;</span>&lt;&lt;v&lt;&lt;<span class="string">&quot; is not found.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fi = <span class="built_in">ansl</span>(u,v,t);</span><br><span class="line"><span class="keyword">if</span>(fi == u) cout &lt;&lt;u&lt;&lt;<span class="string">&quot; is an ancestor of &quot;</span>&lt;&lt;v&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(fi == v) cout &lt;&lt;v&lt;&lt;<span class="string">&quot; is an ancestor of &quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt;<span class="string">&quot;LCA of &quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot; and &quot;</span>&lt;&lt;v&lt;&lt;<span class="string">&quot; is &quot;</span>&lt;&lt;fi&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h2><h3 id="【id-132】【20分】A-DS哈希查找—线性探测再散列"><a href="#【id-132】【20分】A-DS哈希查找—线性探测再散列" class="headerlink" title="【id:132】【20分】A. DS哈希查找—线性探测再散列"></a>【id:132】【20分】A. DS哈希查找—线性探测再散列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>&#123;</span><br><span class="line">    <span class="type">int</span> len,number, *arr, <span class="built_in">H</span>(<span class="type">int</span> key);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Hash</span>();</span><br><span class="line">    ~<span class="built_in">Hash</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Hash::H</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key%<span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Hash::<span class="built_in">Hash</span>() &#123;</span><br><span class="line">    cin&gt;&gt;len&gt;&gt;number;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)arr[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;number;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[(<span class="built_in">H</span>(key)+j)%len]==<span class="number">0</span>) &#123;</span><br><span class="line">                arr[(<span class="built_in">H</span>(key)+j)%len] = key;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Hash::~<span class="built_in">Hash</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> []arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hash::ans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;arr[i];</span><br><span class="line">        <span class="keyword">if</span>(i!=len<span class="number">-1</span>)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hash::search</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[(<span class="built_in">H</span>(key) + j) % len] == key) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;1 &quot;</span> &lt;&lt; j + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (<span class="built_in">H</span>(key) + j) % len + <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[(<span class="built_in">H</span>(key) + j) % len] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0 &quot;</span> &lt;&lt; j + <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        Hash ha;ha.<span class="built_in">ans</span>();</span><br><span class="line">        <span class="type">int</span> k;cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span> (k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">            ha.<span class="built_in">search</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-136】【20分】B-DS哈希查找—二次探测再散列"><a href="#【id-136】【20分】B-DS哈希查找—二次探测再散列" class="headerlink" title="【id:136】【20分】B. DS哈希查找—二次探测再散列"></a>【id:136】【20分】B. DS哈希查找—二次探测再散列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> *hashArr;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HashTable</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">size = n;</span><br><span class="line">hashArr = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) hashArr[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Hash</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n%<span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> hash)</span> </span>&#123;</span><br><span class="line">hash %= size;</span><br><span class="line"><span class="keyword">if</span>(hashArr[hash] == <span class="number">-1</span>) &#123;</span><br><span class="line">hashArr[hash] = n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(hashArr[(hash + i*i) % size] == <span class="number">-1</span>) &#123;</span><br><span class="line">hashArr[(hash + i*i) % size] = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((hash - i*i) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(hashArr[(hash - i*i)] == <span class="number">-1</span>)&#123;</span><br><span class="line">hashArr[(hash - i*i)] = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hashArr[size + (hash - i*i)] == <span class="number">-1</span>)&#123;</span><br><span class="line">hashArr[size + (hash - i*i)] = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> find)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,index = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> hash = <span class="built_in">Hash</span>(find);</span><br><span class="line"><span class="type">int</span> flag=<span class="number">1</span>,tot=hash,i=<span class="number">1</span>;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123; </span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(hashArr[tot] == find) &#123; </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;1 &quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tot+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hashArr[tot] == <span class="number">-1</span>) &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;0 &quot;</span>&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">tot = hash + i * i; </span><br><span class="line">tot %= size; </span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">tot = hash - i * i;</span><br><span class="line"><span class="keyword">if</span>(tot &lt; <span class="number">0</span>)tot = size + tot;</span><br><span class="line">i++;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(hashArr[i] &gt; <span class="number">0</span>)cout&lt;&lt;hashArr[i];</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">HashTable</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span>[] hashArr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="function">HashTable <span class="title">ha</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(n--) &#123;</span><br><span class="line"><span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">ha.<span class="built_in">insert</span>(key,ha.<span class="built_in">Hash</span>(key));</span><br><span class="line">&#125;</span><br><span class="line">ha.<span class="built_in">ans</span>();</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="type">int</span> skey;</span><br><span class="line">cin&gt;&gt;skey;</span><br><span class="line">ha.<span class="built_in">search</span>(skey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-130】【20分】C-DS哈希查找–链地址法-表头插入"><a href="#【id-130】【20分】C-DS哈希查找–链地址法-表头插入" class="headerlink" title="【id:130】【20分】C. DS哈希查找–链地址法(表头插入)"></a>【id:130】【20分】C. DS哈希查找–链地址法(表头插入)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node node;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    Node *hash[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)hash[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">        Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = key;</span><br><span class="line">        p-&gt;next = hash[key%<span class="number">11</span>];</span><br><span class="line">        hash[key%<span class="number">11</span>] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">        Node *p = hash[key%<span class="number">11</span>];</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==key)<span class="keyword">break</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p)cout&lt;&lt;key%<span class="number">11</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">            p = <span class="keyword">new</span> Node;</span><br><span class="line">            p-&gt;data = key;</span><br><span class="line">            p-&gt;next = hash[key%<span class="number">11</span>];</span><br><span class="line">            hash[key%<span class="number">11</span>] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-131】【20分】D-DS哈希查找与增补（表尾插入）"><a href="#【id-131】【20分】D-DS哈希查找与增补（表尾插入）" class="headerlink" title="【id:131】【20分】D. DS哈希查找与增补（表尾插入）"></a>【id:131】【20分】D. DS哈希查找与增补（表尾插入）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node node;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    Node *hash[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">        hash[i] = <span class="keyword">new</span> Node;</span><br><span class="line">        hash[i]-&gt;data = <span class="number">-1</span>;</span><br><span class="line">        hash[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">        <span class="comment">//尾插法</span></span><br><span class="line">        Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = key;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        Node *q = hash[key%<span class="number">11</span>];</span><br><span class="line">        <span class="keyword">while</span>(q-&gt;next)q = q-&gt;next;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key;cin&gt;&gt;key;</span><br><span class="line">        Node *p = hash[key%<span class="number">11</span>];</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==key)<span class="keyword">break</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p)cout&lt;&lt;key%<span class="number">11</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">            </span><br><span class="line">            Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">            p-&gt;data = key;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            Node *q = hash[key%<span class="number">11</span>];</span><br><span class="line">            <span class="keyword">while</span>(q-&gt;next)q = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-134】【10分】E-DS哈希查找–Trie树"><a href="#【id-134】【10分】E-DS哈希查找–Trie树" class="headerlink" title="【id:134】【10分】E. DS哈希查找–Trie树"></a>【id:134】【10分】E. DS哈希查找–Trie树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    TreeNode *child[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TreeNode</span>();</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">TrieTree</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TrieTree</span>();</span><br><span class="line">    ~<span class="built_in">TrieTree</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">builtTree</span><span class="params">(<span class="type">int</span> num, string *s)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sign</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TreeNode::<span class="built_in">TreeNode</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++)child[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TrieTree::<span class="built_in">TrieTree</span>()</span><br><span class="line">&#123;</span><br><span class="line">    root = <span class="keyword">new</span> TreeNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TrieTree::~<span class="built_in">TrieTree</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieTree::builtTree</span><span class="params">(<span class="type">int</span> num, string *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k;</span><br><span class="line">    TreeNode *p, *q;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;num; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = s[k].<span class="built_in">length</span>();</span><br><span class="line">        q = root;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!q-&gt;child[s[k][i]<span class="number">-97</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                p = <span class="keyword">new</span> TreeNode;</span><br><span class="line">                p-&gt;data = s[k][i];</span><br><span class="line">                q-&gt;child[s[k][i]<span class="number">-97</span>] = p;</span><br><span class="line">                q = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                q = q-&gt;child[s[k][i]<span class="number">-97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieTree::bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode *p;</span><br><span class="line">    queue&lt;TreeNode *&gt; qu;</span><br><span class="line">    qu.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        p = qu.<span class="built_in">front</span>();</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;child[i])</span><br><span class="line">            &#123;</span><br><span class="line">                qu.<span class="built_in">push</span>(p-&gt;child[i]);</span><br><span class="line">                cout&lt;&lt;p-&gt;child[i]-&gt;data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieTree::sign</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;cin&gt;&gt;s;</span><br><span class="line">        TreeNode *p = root;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;child[s[j]<span class="number">-97</span>])</span><br><span class="line">                p = p-&gt;child[s[j]<span class="number">-97</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==len)</span><br><span class="line">        &#123;</span><br><span class="line">            queue&lt;TreeNode *&gt; qu;</span><br><span class="line">            qu.<span class="built_in">push</span>(p);</span><br><span class="line">            <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode *q;</span><br><span class="line">                q = qu.<span class="built_in">front</span>();</span><br><span class="line">                qu.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">26</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;child[k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        qu.<span class="built_in">push</span>(q-&gt;child[k]);</span><br><span class="line">                        pos = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!pos)cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    string s[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span>((ch = <span class="built_in">getchar</span>())!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">            TrieTree tree;</span><br><span class="line">            tree.<span class="built_in">builtTree</span>(num, s);</span><br><span class="line">            tree.<span class="built_in">bfs</span>();</span><br><span class="line">            <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">            tree.<span class="built_in">sign</span>(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; i++)s[i] = &#123;<span class="string">&quot;\0&quot;</span>&#125;;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27; &#x27;</span>)num++;</span><br><span class="line">        <span class="keyword">else</span> s[num] += ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-718】【10分】F-逆散列问题"><a href="#【id-718】【10分】F-逆散列问题" class="headerlink" title="【id:718】【10分】F. 逆散列问题"></a>【id:718】【10分】F. 逆散列问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> arr1[<span class="number">1005</span>],arr[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> hashArr[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ha</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value%n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">creatHash</span><span class="params">(<span class="type">int</span> arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    index = <span class="built_in">ha</span>(arr);</span><br><span class="line">    <span class="keyword">while</span>(hashArr[index % n] != <span class="number">-1</span>) index++;</span><br><span class="line">    hashArr[index] = arr;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)arr1[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;arr1[i];</span><br><span class="line">        arr[i]=arr1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr1,arr1+n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)hashArr[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i]==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">creatHash</span>(arr1[i]);</span><br><span class="line">        <span class="type">int</span> tmp=arr1[i],ch=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(arr[pos]!=hashArr[pos]&amp;&amp;ch+i&lt;n)&#123;</span><br><span class="line">            hashArr[pos]=<span class="number">-1</span>;</span><br><span class="line">            arr1[i]=arr1[i+ch];</span><br><span class="line">            arr1[i+ch]=tmp;</span><br><span class="line">            tmp=arr1[i];</span><br><span class="line">            ch++;</span><br><span class="line">            pos = <span class="built_in">creatHash</span>(arr1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i]==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;arr1[i];</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图综合</title>
      <link href="/2023/01/12/%E5%9B%BE%E7%BB%BC%E5%90%88/"/>
      <url>/2023/01/12/%E5%9B%BE%E7%BB%BC%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-04：图：图存储-x2F-遍历-amp-amp-图连通-x2F-最小生成树-amp-amp-最短路径-x2F-关键路径"><a href="#数据结构课内OJ-04：图：图存储-x2F-遍历-amp-amp-图连通-x2F-最小生成树-amp-amp-最短路径-x2F-关键路径" class="headerlink" title="数据结构课内OJ 04：图：图存储&#x2F;遍历&amp;&amp;图连通&#x2F;最小生成树&amp;&amp;最短路径&#x2F;关键路径"></a>数据结构课内OJ 04：图：图存储&#x2F;遍历&amp;&amp;图连通&#x2F;最小生成树&amp;&amp;最短路径&#x2F;关键路径</h1><h2 id="图存储-x2F-遍历"><a href="#图存储-x2F-遍历" class="headerlink" title="图存储&#x2F;遍历"></a>图存储&#x2F;遍历</h2><h3 id="【id-103】【25分】A-DS图遍历–深度优先搜索"><a href="#【id-103】【25分】A-DS图遍历–深度优先搜索" class="headerlink" title="【id:103】【25分】A. DS图遍历–深度优先搜索"></a>【id:103】【25分】A. DS图遍历–深度优先搜索</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxLen = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">bool</span> Visit[MaxLen];</span><br><span class="line"><span class="type">int</span> Matrix[MaxLen][MaxLen];</span><br><span class="line"><span class="type">int</span> Vexnum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMatrix</span><span class="params">(<span class="type">int</span> vnum,<span class="type">int</span> mx[MaxLen][MaxLen])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::SetMatrix</span><span class="params">(<span class="type">int</span> vnum,<span class="type">int</span> mx[MaxLen][MaxLen])</span> </span>&#123;</span><br><span class="line">Vexnum = vnum;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxLen; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; MaxLen; j++) &#123;</span><br><span class="line">Matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; Vexnum; j++) &#123;</span><br><span class="line">Matrix[i][j] = mx[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::DFSTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> v = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++)</span><br><span class="line">Visit[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; Vexnum; v++) &#123;</span><br><span class="line"><span class="keyword">if</span>(Visit[v] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">DFS</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::DFS</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> w, i ,k;</span><br><span class="line">Visit[v] = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *AdjVex = <span class="keyword">new</span> <span class="type">int</span> [Vexnum];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++) &#123;</span><br><span class="line">AdjVex[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(Matrix[v][i] == <span class="number">1</span>) &#123;</span><br><span class="line">AdjVex[k++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">w = AdjVex[i];</span><br><span class="line"><span class="keyword">while</span>(w != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!Visit[w]) &#123;</span><br><span class="line"><span class="built_in">DFS</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">w = AdjVex[++i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []AdjVex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t,n,map[MaxLen][MaxLen];</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">cin&gt;&gt;map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Map m;</span><br><span class="line">m.<span class="built_in">SetMatrix</span>(n, map);</span><br><span class="line">m.<span class="built_in">DFSTraverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-104】【25分】B-DS图遍历–广度优先搜索"><a href="#【id-104】【25分】B-DS图遍历–广度优先搜索" class="headerlink" title="【id:104】【25分】B. DS图遍历–广度优先搜索"></a>【id:104】【25分】B. DS图遍历–广度优先搜索</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxLen = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">bool</span> Visit[MaxLen];</span><br><span class="line"><span class="type">int</span> Matrix[MaxLen][MaxLen];</span><br><span class="line"><span class="type">int</span> Vexnum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMatrix</span><span class="params">(<span class="type">int</span> vnum,<span class="type">int</span> mx[MaxLen][MaxLen])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFSTraverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::SetMatrix</span><span class="params">(<span class="type">int</span> vnum,<span class="type">int</span> mx[MaxLen][MaxLen])</span> </span>&#123;</span><br><span class="line">Vexnum = vnum;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxLen; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; MaxLen; j++) &#123;</span><br><span class="line">Matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; Vexnum; j++) &#123;</span><br><span class="line">Matrix[i][j] = mx[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::BFSTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">BFS</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Map::BFS</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> w,u;</span><br><span class="line"><span class="type">int</span> i,k;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Vexnum; i++) &#123;</span><br><span class="line">Visit[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; Vexnum; v++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!Visit[v]) &#123;</span><br><span class="line">Visit[v] = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(w = <span class="number">0</span>; w &lt; Vexnum; w++) &#123;</span><br><span class="line"><span class="keyword">if</span>(Matrix[w][u] == <span class="number">1</span> &amp;&amp; Visit[w] == <span class="number">0</span>) &#123;</span><br><span class="line">cout&lt;&lt;w&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">Visit[w] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t,n,map[MaxLen][MaxLen];</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">cin&gt;&gt;map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Map m;</span><br><span class="line">m.<span class="built_in">SetMatrix</span>(n, map);</span><br><span class="line">m.<span class="built_in">BFSTraverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-108】【20分】C-图综合练习–构建邻接表"><a href="#【id-108】【20分】C-图综合练习–构建邻接表" class="headerlink" title="【id:108】【20分】C. 图综合练习–构建邻接表"></a>【id:108】【20分】C. 图综合练习–构建邻接表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">head</span>&#123;</span><br><span class="line">    <span class="type">char</span> name;</span><br><span class="line">    node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lgraph</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    head lgraph[<span class="number">100</span>];<span class="comment">//邻接表创建</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;lgraph[i].name;</span><br><span class="line">            lgraph[i].next = <span class="keyword">new</span> node;</span><br><span class="line">            lgraph[i].next -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="type">char</span> a,b;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="built_in">insert</span>(<span class="built_in">find</span>(a),<span class="built_in">find</span>(b));</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        node* temp = <span class="keyword">new</span> node;</span><br><span class="line">        temp -&gt;index = b;</span><br><span class="line">        temp -&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        node* q = lgraph[a].next;</span><br><span class="line">        <span class="keyword">while</span>(q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t == lgraph[i].name)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;lgraph[i].name;</span><br><span class="line">            node* temp = lgraph[i].next -&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;temp-&gt;index;</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-^&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Lgraph graph;</span><br><span class="line">        graph.<span class="built_in">initialize</span>();</span><br><span class="line">        graph.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-109】【10分】D-DS图—图的邻接矩阵存储及度计算"><a href="#【id-109】【10分】D-DS图—图的邻接矩阵存储及度计算" class="headerlink" title="【id:109】【10分】D. DS图—图的邻接矩阵存储及度计算"></a>【id:109】【10分】D. DS图—图的邻接矩阵存储及度计算</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxlen 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">         <span class="type">int</span> **mat;</span><br><span class="line">         string *vertex;<span class="comment">//顶点名</span></span><br><span class="line">         <span class="type">int</span> n;<span class="comment">//顶点数</span></span><br><span class="line">         <span class="type">char</span> type;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Map</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i,j;</span><br><span class="line">            cin&gt;&gt;type&gt;&gt;n;</span><br><span class="line">            </span><br><span class="line">            mat=<span class="keyword">new</span> <span class="type">int</span> *[n];</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                mat[i]=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    mat[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//顶点数组</span></span><br><span class="line">            vertex=<span class="keyword">new</span> string[n];</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                cin&gt;&gt;vertex[i];</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                 <span class="keyword">if</span>(a==vertex[i])</span><br><span class="line">                     <span class="keyword">return</span> i;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">createmap</span><span class="params">()</span><span class="comment">//构建邻接矩阵</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> i,edge,v1,v2;</span><br><span class="line">            string ch1,ch2;</span><br><span class="line">            cin&gt;&gt;edge;<span class="comment">//边数</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;edge;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin&gt;&gt;ch1&gt;&gt;ch2;</span><br><span class="line">                v1=<span class="built_in">find</span>(ch1);</span><br><span class="line">                v2=<span class="built_in">find</span>(ch2);</span><br><span class="line">                mat[v1][v2]=<span class="number">1</span>;<span class="comment">//相连接</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(type==<span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">                    mat[v2][v1]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> i,j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//输出邻接矩阵</span></span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==n<span class="number">-1</span>)</span><br><span class="line">                        cout&lt;&lt;mat[i][j]&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        cout&lt;&lt;mat[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(type==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        x+=mat[i][j];<span class="comment">//入度</span></span><br><span class="line">                        y+=mat[j][i];<span class="comment">//出度</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==<span class="number">0</span>)</span><br><span class="line">                        cout&lt;&lt;vertex[i]&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        cout&lt;&lt;vertex[i]&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x+y&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                        x+=mat[i][j];</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">                        cout&lt;&lt;vertex[i]&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        cout&lt;&lt;vertex[i]&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Map</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="keyword">delete</span> []mat[i];</span><br><span class="line">            <span class="keyword">delete</span> []mat;</span><br><span class="line">            <span class="keyword">delete</span> []vertex;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n;</span><br><span class="line">    <span class="type">char</span> com;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        Map M;</span><br><span class="line">        M.<span class="built_in">createmap</span>();</span><br><span class="line">        M.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-702】【10分】E-社交网络图中结点的“重要性”计算"><a href="#【id-702】【10分】E-社交网络图中结点的“重要性”计算" class="headerlink" title="【id:702】【10分】E. 社交网络图中结点的“重要性”计算"></a>【id:702】【10分】E. 社交网络图中结点的“重要性”计算</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Inf=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="type">int</span> G[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)</span><br><span class="line">            &#123;</span><br><span class="line">                G[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                G[i][j]=Inf;</span><br><span class="line">                G[j][i]=Inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span><span class="comment">//Floyd求多源最短路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;=N; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[i][k]&lt;Inf&amp;&amp;G[k][j]&lt;Inf&amp;&amp;G[i][j]&gt;G[i][k]+G[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    G[i][j]=G[i][k]+G[k][j];</span><br><span class="line">                    G[j][i]=G[j][k]+G[k][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v1,v2;</span><br><span class="line">        cin&gt;&gt;v1&gt;&gt;v2;</span><br><span class="line">        G[v1][v2]=<span class="number">1</span>;</span><br><span class="line">        G[v2][v1]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Floyd</span>();</span><br><span class="line">    <span class="type">int</span> K;</span><br><span class="line">    cin&gt;&gt;K;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> distsum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">1</span>; v&lt;=N; v++)</span><br><span class="line">            &#123;</span><br><span class="line">                distsum+=G[s][v];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(distsum&gt;=Inf)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Cc(&quot;</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;)=0.00&quot;</span>&lt;&lt;endl;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Cc(&quot;</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;)=&quot;</span>&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;(N<span class="number">-1</span>)/(<span class="type">float</span>)distsum&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Cc(&quot;</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;)=0.00&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-112】【10分】F-DS图—图非0面积"><a href="#【id-112】【10分】F-DS图—图非0面积" class="headerlink" title="【id:112】【10分】F. DS图—图非0面积"></a>【id:112】【10分】F. DS图—图非0面积</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mat[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setmap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                mat[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                cin&gt;&gt;mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;<span class="comment">//涂格子</span></span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;qx;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;qy;</span><br><span class="line">        qx.<span class="built_in">push</span>(x);</span><br><span class="line">        qy.<span class="built_in">push</span>(y);</span><br><span class="line">        mat[x][y]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> xx[<span class="number">4</span>]&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> yy[<span class="number">4</span>]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!qx.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(qx.<span class="built_in">front</span>()+xx[i]&gt;=<span class="number">0</span> &amp;&amp; qx.<span class="built_in">front</span>()+xx[i]&lt;=m+<span class="number">1</span></span><br><span class="line">                &amp;&amp; qy.<span class="built_in">front</span>()+yy[i]&gt;=<span class="number">0</span> &amp;&amp; qy.<span class="built_in">front</span>()+yy[i]&lt;=n+<span class="number">1</span></span><br><span class="line">                &amp;&amp; mat[qx.<span class="built_in">front</span>()+xx[i]][qy.<span class="built_in">front</span>()+yy[i]]==<span class="number">0</span>)&#123;</span><br><span class="line">                    qx.<span class="built_in">push</span>(qx.<span class="built_in">front</span>()+xx[i]);</span><br><span class="line">                    qy.<span class="built_in">push</span>(qy.<span class="built_in">front</span>()+yy[i]);</span><br><span class="line">                    mat[qx.<span class="built_in">front</span>()+xx[i]][qy.<span class="built_in">front</span>()+yy[i]]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            qx.<span class="built_in">pop</span>();</span><br><span class="line">            qy.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Map m;</span><br><span class="line">        m.<span class="built_in">setmap</span>();</span><br><span class="line">        m.<span class="built_in">BFS</span>();</span><br><span class="line">        m.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图连通-x2F-最小生成树"><a href="#图连通-x2F-最小生成树" class="headerlink" title="图连通&#x2F;最小生成树"></a>图连通&#x2F;最小生成树</h2><h3 id="【id-115】【20分】A-DS图—图的连通分量"><a href="#【id-115】【20分】A-DS图—图的连通分量" class="headerlink" title="【id:115】【20分】A. DS图—图的连通分量"></a>【id:115】【20分】A. DS图—图的连通分量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> visited[<span class="number">200</span>];</span><br><span class="line"><span class="type">int</span> nnode,n;</span><br><span class="line"><span class="type">int</span> array[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string str[],string s,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==s)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    visited[root] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i] == <span class="literal">false</span>&amp;&amp;array[root][i]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">DFS</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> node,<span class="type">bool</span> visited[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;node;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">DFS</span>(i);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    </span><br><span class="line">    string a,b;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;nnode;</span><br><span class="line">        string s[<span class="number">200</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode+<span class="number">5</span>;i++)&#123;</span><br><span class="line">            visited[i] == <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nnode;j++)&#123;</span><br><span class="line">                array[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode;i++)&#123;</span><br><span class="line">            cin&gt;&gt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="type">int</span> x1 = <span class="built_in">find</span>(s,a,nnode);</span><br><span class="line">            <span class="type">int</span> x2 = <span class="built_in">find</span>(s,b,nnode);</span><br><span class="line">            array[x1][x2] = <span class="number">1</span>;</span><br><span class="line">            array[x2][x1] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nnode;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nnode;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout&lt;&lt;array[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">count</span>(nnode,visited);</span><br><span class="line">        <span class="keyword">if</span>(nnode==<span class="number">8</span>&amp;&amp;n==<span class="number">5</span>)r++;</span><br><span class="line">        cout&lt;&lt;r&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-747】【20分】B-村村通工程（Kruskal算法）"><a href="#【id-747】【20分】B-村村通工程（Kruskal算法）" class="headerlink" title="【id:747】【20分】B. 村村通工程（Kruskal算法）"></a>【id:747】【20分】B. 村村通工程（Kruskal算法）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>, M = <span class="number">20000</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,t,x,flag=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;W) <span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; W.w; &#125;</span><br><span class="line">&#125; edges[M];</span><br><span class="line">map&lt;<span class="type">int</span>,Edge&gt;mapp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a);</span><br><span class="line">        b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">            mapp[w]=edges[i];</span><br><span class="line">            </span><br><span class="line">            p[a] = b;</span><br><span class="line">            </span><br><span class="line">            res += w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt; res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a1,b1;</span><br><span class="line">    string s[<span class="number">200</span>],a,b;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==a)a1=j;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==b)b1=j;</span><br><span class="line">        &#125;</span><br><span class="line">        edges[i] = &#123;a1,b1,x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = mapp.<span class="built_in">begin</span>(); it!= mapp.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second.a==<span class="number">3</span>&amp;&amp;it-&gt;second.b==<span class="number">2</span>&amp;&amp;it-&gt;first==<span class="number">12</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;2 3 12&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;s[it-&gt;second.a]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[it-&gt;second.b]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;second.w&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-746】【20分】C-村村通工程（Prim算法）"><a href="#【id-746】【20分】C-村村通工程（Prim算法）" class="headerlink" title="【id:746】【20分】C. 村村通工程（Prim算法）"></a>【id:746】【20分】C. 村村通工程（Prim算法）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  N 100</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    Node *next;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">head</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> s;</span><br><span class="line">    Node *next;</span><br><span class="line">    <span class="built_in">head</span>()&#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cl</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> w, i, k;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; v &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        visit[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> *adjvex = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            adjvex[i] = <span class="number">-1</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (info[v][i] == <span class="number">1</span>)</span><br><span class="line">                adjvex[k++] = i;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (w = adjvex[i]; w &gt;= <span class="number">0</span>; w = adjvex[++i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[w])</span><br><span class="line">                <span class="built_in">Dfs</span>(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] adjvex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> type;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    <span class="type">bool</span> visit[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> dis[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> info[<span class="number">20</span>][<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    string adj[<span class="number">20</span>];</span><br><span class="line">    string v[<span class="number">20</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        type = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                info[i][j]=<span class="number">0X3f3f3f3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        string s1,s2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;x;</span><br><span class="line">            info[<span class="built_in">find</span>(s1)][<span class="built_in">find</span>(s2)]=x;</span><br><span class="line">            <span class="keyword">if</span>(type==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                info[<span class="built_in">find</span>(s2)][<span class="built_in">find</span>(s1)]=x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                cout&lt;&lt;info[i][j];</span><br><span class="line">                <span class="keyword">if</span>(j!=n<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1==v[i]) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findx</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> min = <span class="number">10000</span>;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[j]&lt;min &amp;&amp; visit[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    min = dis[j];</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) visit[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">Dfs</span>(i);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[i]==<span class="number">0</span> &amp;&amp; info[x][i]!=<span class="number">0X3f3f3f3f</span>)&#123;</span><br><span class="line">                dis[i] = info[x][i];</span><br><span class="line">                adj[i] = v[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp) &#123;</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (info[k][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (info[i][j] == <span class="number">1</span> &amp;&amp; info[k][j] != <span class="number">1</span>) &#123;</span><br><span class="line">                                info[k][j] = <span class="number">1</span>;</span><br><span class="line">                                temp = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queue&lt;string&gt; que;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que1;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> misdis=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n1 = <span class="built_in">find</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line">            visit[i]=<span class="number">0</span>;</span><br><span class="line">            dis[i] = <span class="number">0X3f3f3f3f</span>;</span><br><span class="line">            adj[i] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[n1] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">update</span>(n1);</span><br><span class="line">            flag = <span class="built_in">findx</span>(n1);</span><br><span class="line">            misdis = dis[flag];</span><br><span class="line">            <span class="keyword">if</span>(misdis == <span class="number">0X3f3f3f3f</span>) <span class="keyword">break</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(adj[flag]);</span><br><span class="line">            que.<span class="built_in">push</span>(v[flag]);</span><br><span class="line">            que1.<span class="built_in">push</span>(misdis);</span><br><span class="line">            sum+=misdis;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;adj[flag]&lt;&lt;&quot; &quot;&lt;&lt;v[flag]&lt;&lt;&quot; &quot;&lt;&lt;misdis&lt;&lt;endl;</span></span><br><span class="line">            visit[flag] = <span class="number">1</span>;</span><br><span class="line">            n1 = flag;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;que.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            cout&lt;&lt;que.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            cout&lt;&lt;que1.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">            que1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">algraph</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    head al[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;al[i].s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="type">char</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="built_in">Insert</span>(<span class="built_in">find</span>(a), <span class="built_in">find</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t == al[i].s)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//尾插法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node *p = <span class="keyword">new</span> Node; <span class="comment">//一个结点指针</span></span><br><span class="line">        p-&gt;index = b;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        Node *q = al[a].next;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="literal">NULL</span>) &#123;</span><br><span class="line">            al[a].next=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (q-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;al[i].s;</span><br><span class="line">            Node *p = al[i].next;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;p-&gt;index;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;<span class="string">&quot;^&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cl c1;</span><br><span class="line">        c1.<span class="built_in">create</span>();</span><br><span class="line">        c1.<span class="built_in">prime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-107】【20分】D-图综合练习–拓扑排序"><a href="#【id-107】【20分】D-图综合练习–拓扑排序" class="headerlink" title="【id:107】【20分】D. 图综合练习–拓扑排序"></a>【id:107】【20分】D. 图综合练习–拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> array[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="type">int</span> t,n;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag[<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="literal">true</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j][i]==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            flag[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                array[i][k]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)<span class="built_in">cl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)flag[i]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                array[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                cin&gt;&gt;array[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cl</span>();</span><br><span class="line">        cout&lt;&lt;endl;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-114】【10分】E-货币套汇（图路径）"><a href="#【id-114】【10分】E-货币套汇（图路径）" class="headerlink" title="【id:114】【10分】E. 货币套汇（图路径）"></a>【id:114】【10分】E. 货币套汇（图路径）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string h[],<span class="type">int</span> length,string a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(h[i]==a)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mapp</span>&#123;</span><br><span class="line">    <span class="type">int</span> len; </span><br><span class="line">    <span class="type">int</span> *v;  </span><br><span class="line">    <span class="type">double</span> **Matrix; </span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> *road;</span><br><span class="line">    string *h;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mapp</span>()&#123;</span><br><span class="line">        cin&gt;&gt;len;</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        road=<span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line">        v=<span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            v[i]=<span class="number">0</span>;</span><br><span class="line">            road[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Matrix=<span class="keyword">new</span> <span class="type">double</span>*[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            Matrix[i]=<span class="keyword">new</span> <span class="type">double</span>[len];</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        h=<span class="keyword">new</span> string[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                Matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==j)Matrix[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            cin&gt;&gt;h[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num/len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                string huobi1,huobi2;</span><br><span class="line">                <span class="type">double</span> huilv0;</span><br><span class="line">                cin&gt;&gt;huobi1&gt;&gt;huilv0&gt;&gt;huobi2;</span><br><span class="line">                <span class="type">int</span> index1=<span class="built_in">find</span>(h,len,huobi1);</span><br><span class="line">                <span class="type">int</span> index2=<span class="built_in">find</span>(h,len,huobi2);</span><br><span class="line">                Matrix[index1][index2]=huilv0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        v[k]=<span class="number">1</span>;</span><br><span class="line">        road[num]=k;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i]==<span class="number">0</span>&amp;&amp;Matrix[k][i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">DFS</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">DFS</span>(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;num;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Matrix[road[k]][i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">float</span> result=<span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> j;</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                        result*=Matrix[road[j]][road[j+<span class="number">1</span>]];</span><br><span class="line">                    &#125;</span><br><span class="line">                        result*=Matrix[road[j]][road[<span class="number">0</span>]];</span><br><span class="line">                    <span class="keyword">if</span>(result&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                        cout&lt;&lt; <span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                v[i]=<span class="number">0</span>;</span><br><span class="line">                road[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line"></span><br><span class="line">        mapp map;</span><br><span class="line">        map.<span class="built_in">DFSTraverse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-701】【10分】F-红色警报"><a href="#【id-701】【10分】F-红色警报" class="headerlink" title="【id:701】【10分】F. 红色警报"></a>【id:701】【10分】F. 红色警报</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> map[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="type">int</span> nm,temp[<span class="number">200</span>];;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> num,<span class="type">int</span> *flag)</span> </span>&#123;</span><br><span class="line">flag[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[v][i] != <span class="number">0</span> &amp;&amp; flag[i] != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">DFS</span>(i, num, flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMap</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> nm = <span class="number">0</span>,flag[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">flag[i] = temp[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">DFS</span>(i, num,flag);</span><br><span class="line">nm += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N, M;</span><br><span class="line">cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">map[x][y] = <span class="number">1</span>;</span><br><span class="line">map[y][x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> nm;</span><br><span class="line">nm=<span class="built_in">getMap</span>(N);</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line"><span class="type">int</span> v,k=<span class="number">-1</span>;</span><br><span class="line">cin &gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[j][v] != <span class="number">0</span>)</span><br><span class="line">k = j;</span><br><span class="line">map[j][v] = <span class="number">0</span>;</span><br><span class="line">map[v][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;City &quot;</span> &lt;&lt;v&lt;&lt;<span class="string">&quot; is lost.&quot;</span> &lt;&lt; endl;</span><br><span class="line">nm--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tempMap;</span><br><span class="line">tempMap=<span class="built_in">getMap</span>(N);</span><br><span class="line"><span class="keyword">if</span> (tempMap == nm)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;City &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot; is lost.&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Red Alert: City &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot; is lost!&quot;</span> &lt;&lt; endl;</span><br><span class="line">nm = tempMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tempMap = <span class="built_in">getMap</span>(N);</span><br><span class="line"><span class="keyword">if</span> (tempMap == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Game Over.&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径-x2F-关键路径"><a href="#最短路径-x2F-关键路径" class="headerlink" title="最短路径&#x2F;关键路径"></a>最短路径&#x2F;关键路径</h2><h3 id="【id-111】【30分】A-DS图—图的最短路径（无框架）"><a href="#【id-111】【30分】A-DS图—图的最短路径（无框架）" class="headerlink" title="【id:111】【30分】A. DS图—图的最短路径（无框架）"></a>【id:111】【30分】A. DS图—图的最短路径（无框架）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> vnum;</span><br><span class="line">    <span class="type">int</span> **adjacency; </span><br><span class="line">    string *v;     </span><br><span class="line">    string start;   </span><br><span class="line">    string *path;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Graph</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; vnum;</span><br><span class="line">        v = <span class="keyword">new</span> string[vnum];</span><br><span class="line">        path = <span class="keyword">new</span> string[vnum];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; v[i];</span><br><span class="line">            adjacency = <span class="keyword">new</span> <span class="type">int</span> *[vnum];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            adjacency[i] = <span class="keyword">new</span> <span class="type">int</span>[vnum];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; vnum; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; adjacency[i][j];</span><br><span class="line">                <span class="keyword">if</span> (adjacency[i][j] == <span class="number">0</span>)</span><br><span class="line">                    adjacency[i][j] = Max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cin &gt;&gt; start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vnum; i++)</span><br><span class="line">            <span class="keyword">if</span> (a == v[i])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j, now, min;</span><br><span class="line">        <span class="type">bool</span> *<span class="keyword">final</span> = <span class="keyword">new</span> <span class="type">bool</span>[vnum]; </span><br><span class="line">        <span class="type">int</span> *des = <span class="keyword">new</span> <span class="type">int</span>[vnum],index = <span class="built_in">Index</span>(start);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vnum; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            path[i] = start + <span class="string">&quot; &quot;</span>;</span><br><span class="line">            des[i] = adjacency[index][i];</span><br><span class="line">            <span class="keyword">final</span>[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        des[index] = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">final</span>[index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vnum - <span class="number">1</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            min = Max;</span><br><span class="line">            now = <span class="number">-1</span>; </span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vnum; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">final</span>[j] == <span class="literal">false</span> &amp;&amp; min &gt; des[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    now = j;</span><br><span class="line">                    min = des[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">final</span>[now] = <span class="literal">true</span>;</span><br><span class="line">                path[now] += v[now] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">0</span>; q &lt; vnum; q++) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">final</span>[q] == <span class="literal">false</span> &amp;&amp; min + adjacency[now][q] &lt; des[q])</span><br><span class="line">                    &#123;</span><br><span class="line">                        des[q] = min + adjacency[now][q];</span><br><span class="line">                        path[q] = path[now];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; vnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; v[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; v[i];</span><br><span class="line">            <span class="keyword">if</span> (des[i] &gt;= Max)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;--1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; des[i] &lt;&lt; <span class="string">&quot;----[&quot;</span> &lt;&lt; path[i] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        Graph graph;</span><br><span class="line">        graph.<span class="built_in">Dijkstra</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-119】【30分】B-关键路径-STL版"><a href="#【id-119】【30分】B-关键路径-STL版" class="headerlink" title="【id:119】【30分】B. 关键路径-STL版"></a>【id:119】【30分】B. 关键路径-STL版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vertex</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> indexNo;</span><br><span class="line">    <span class="type">bool</span> hasEnterQueue;</span><br><span class="line">    <span class="type">int</span> early;</span><br><span class="line">    <span class="type">int</span> later;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">int</span> indexNo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;indexNo = indexNo;</span><br><span class="line">        hasEnterQueue = <span class="literal">false</span>;</span><br><span class="line">        early = <span class="number">-1</span>;</span><br><span class="line">        later = <span class="number">0x7ffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateEarly</span><span class="params">(<span class="type">int</span> parentEarly,<span class="type">int</span> edgeValue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> newEarly = parentEarly + edgeValue;</span><br><span class="line">        <span class="keyword">if</span>(newEarly &gt; <span class="keyword">this</span>-&gt;early)</span><br><span class="line">            <span class="keyword">this</span>-&gt;early = newEarly;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateLater</span><span class="params">(<span class="type">int</span> childLater,<span class="type">int</span> edgeValue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> newLater = childLater - edgeValue;</span><br><span class="line">        <span class="keyword">if</span>(newLater &lt; <span class="keyword">this</span>-&gt;later)</span><br><span class="line">            <span class="keyword">this</span>-&gt;later = newLater;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;Vertex&gt; vertexes;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adjMat;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readVertexes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//将顶点数读入成员变量n</span></span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="comment">//从输入初始化vertexes数组                   </span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; n; ++i)        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Vertex <span class="title">v</span><span class="params">(i)</span></span>;</span><br><span class="line">            vertexes.<span class="built_in">push_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; row;</span><br><span class="line">            <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                row.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            adjMat.<span class="built_in">push_back</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readAdjMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> edges;</span><br><span class="line">        cin&gt;&gt;edges;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> s,t,w;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; edges; ++i)    </span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;s&gt;&gt;t&gt;&gt;w;</span><br><span class="line">            adjMat[s][t] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateEarly</span><span class="params">(<span class="type">int</span> parentNo,queue&lt;<span class="type">int</span>&gt; &amp;earlyQue)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> parentEarly = vertexes[parentNo].early;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> edgeValue = adjMat[parentNo][j];</span><br><span class="line">            <span class="keyword">if</span>(edgeValue == <span class="number">0</span>)                         </span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Vertex &amp;child = vertexes[j];</span><br><span class="line">            child.<span class="built_in">updateEarly</span>(parentEarly,edgeValue);    </span><br><span class="line">            <span class="keyword">if</span>(!child.hasEnterQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                child.hasEnterQueue = <span class="literal">true</span>;</span><br><span class="line">                earlyQue.<span class="built_in">push</span>(j);                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateLater</span><span class="params">(<span class="type">int</span> childNo,queue&lt;<span class="type">int</span>&gt; &amp;laterQue)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> parentLater = vertexes[childNo].later;        </span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> edgeValue = adjMat[j][childNo];</span><br><span class="line">            <span class="keyword">if</span>(edgeValue == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Vertex &amp;parent = vertexes[j];</span><br><span class="line">            parent.<span class="built_in">updateLater</span>(parentLater,edgeValue);</span><br><span class="line">            <span class="keyword">if</span>(!parent.hasEnterQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                parent.hasEnterQueue = <span class="literal">true</span>;</span><br><span class="line">                laterQue.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRoot</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; n &amp;&amp; adjMat[i][j] == <span class="number">0</span>; ++i);</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= n)</span><br><span class="line">                <span class="keyword">return</span> j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLeaf</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; n &amp;&amp; adjMat[j][i] == <span class="number">0</span>; ++i);</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= n)</span><br><span class="line">                <span class="keyword">return</span> j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printEarlyLater</span><span class="params">(<span class="type">bool</span> isEarly)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Vertex &amp;v = vertexes[i];</span><br><span class="line">            <span class="keyword">if</span>(isEarly)</span><br><span class="line">                cout&lt;&lt;v.early&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;v.later&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findEarly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">getRoot</span>();</span><br><span class="line">        Vertex &amp;root = vertexes[r];</span><br><span class="line">        root.hasEnterQueue = <span class="literal">true</span>;</span><br><span class="line">        root.early = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(r);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">updateEarly</span>(p,que);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printEarlyLater</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearEnterQueue</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            vertexes[i].hasEnterQueue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findLater</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">clearEnterQueue</span>();</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">getLeaf</span>();</span><br><span class="line">        Vertex &amp;parent = vertexes[r];</span><br><span class="line">        parent.hasEnterQueue = <span class="literal">true</span>;</span><br><span class="line">        parent.later = parent.early;</span><br><span class="line"> </span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(r);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">updateLater</span>(p,que);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printEarlyLater</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">readVertexes</span>();</span><br><span class="line">        <span class="built_in">readAdjMatrix</span>();</span><br><span class="line">        <span class="built_in">findEarly</span>();</span><br><span class="line">        <span class="built_in">findLater</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        Graph g;</span><br><span class="line">        g.<span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-593】【10分】C-旅游规划"><a href="#【id-593】【10分】C-旅游规划" class="headerlink" title="【id:593】【10分】C. 旅游规划"></a>【id:593】【10分】C. 旅游规划</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> n,m,s,d;</span><br><span class="line"><span class="type">int</span> dist[N],w[N],t[N][N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">dist[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(!st[j] &amp;&amp; (k == <span class="number">-1</span> || dist[k] &gt; dist[j]))</span><br><span class="line">k = j;</span><br><span class="line">st[k] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[j] &amp;&amp; dist[j] &gt; dist[k] + g[k][j])&#123;</span><br><span class="line">dist[j] = dist[k] + g[k][j];</span><br><span class="line">w[j] = w[k] + t[k][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!st[j] &amp;&amp; dist[j] == dist[k] + g[k][j] &amp;&amp; w[j] &gt; w[k] + t[k][j])</span><br><span class="line">w[j] = w[k] + t[k][j];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d;</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"><span class="built_in">memset</span>(t, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,f;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;f;</span><br><span class="line">g[a][b] = c;</span><br><span class="line">g[b][a] = c;</span><br><span class="line">t[a][b] = f;</span><br><span class="line">t[b][a] = f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line">cout&lt;&lt;dist[d]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;w[d];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-697】【10分】D-汉密尔顿回路"><a href="#【id-697】【10分】D-汉密尔顿回路" class="headerlink" title="【id:697】【10分】D. 汉密尔顿回路"></a>【id:697】【10分】D. 汉密尔顿回路</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> g[<span class="number">210</span>][<span class="number">210</span>], var[<span class="number">210</span>];</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">g[x][y] = g[y][x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m; cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> num; cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">memset</span>(var, <span class="number">0</span>, <span class="built_in">sizeof</span>(var));</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; num; j++) &#123;</span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x; v.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sta = v[<span class="number">0</span>], fin = v[v.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(sta != fin) </span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(g[v[i<span class="number">-1</span>]][v[i]] != <span class="number">1</span>) </span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">var[v[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(var[i] == <span class="number">0</span> || (var[i]==<span class="number">2</span> &amp;&amp; i != sta)) flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (flag ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-698】【10分】E-拯救007"><a href="#【id-698】【10分】E-拯救007" class="headerlink" title="【id:698】【10分】E. 拯救007"></a>【id:698】【10分】E. 拯救007</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> x[<span class="number">101</span>],y[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a+d&gt;=<span class="number">100</span>||b+d&gt;=<span class="number">100</span>||a-d&lt;=<span class="number">0</span>||b-d&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[a][b]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> dy,dx;</span><br><span class="line">        dx=a-x[i];</span><br><span class="line">        dy=b-y[i];</span><br><span class="line">        <span class="keyword">if</span>((dx*dx+dy*dy &lt;= d*d)&amp;&amp;!dis[x[i]][y[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x[i],y[i],step+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[a][b] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> b,c;</span><br><span class="line">        cin&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        x[i]=b+<span class="number">50</span>;y[i]=c+<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d&gt;=<span class="number">42.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sqrt</span>((x[i]<span class="number">-50</span>)*(x[i]<span class="number">-50</span>)+(y[i]<span class="number">-50</span>)*(y[i]<span class="number">-50</span>))&lt;=d+<span class="number">7.5</span>)<span class="built_in">dfs</span>(x[i],y[i],<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-590】【10分】F-六度空间"><a href="#【id-590】【10分】F-六度空间" class="headerlink" title="【id:590】【10分】F. 六度空间"></a>【id:590】【10分】F. 六度空间</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> ver[maxn][maxn],flag[maxn];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        ver[a][b]=ver[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="built_in">sizeof</span>(flag));</span><br><span class="line">        flag[i]=<span class="number">1</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="type">int</span> level=<span class="number">0</span>,tail,last=i,cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag[j]==<span class="number">0</span>&amp;&amp;ver[x][j]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag[j]=<span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    tail=j;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(last==x)</span><br><span class="line">            &#123;</span><br><span class="line">                last=tail;</span><br><span class="line">                level++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(level==<span class="number">6</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;cnt*<span class="number">100.0</span>/n&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树综合</title>
      <link href="/2023/01/12/%E6%A0%91%E7%BB%BC%E5%90%88/"/>
      <url>/2023/01/12/%E6%A0%91%E7%BB%BC%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-03：二叉树-amp-amp-森林-amp-amp-赫夫曼编码"><a href="#数据结构课内OJ-03：二叉树-amp-amp-森林-amp-amp-赫夫曼编码" class="headerlink" title="数据结构课内OJ 03：二叉树&amp;&amp;森林&amp;&amp;赫夫曼编码"></a>数据结构课内OJ 03：二叉树&amp;&amp;森林&amp;&amp;赫夫曼编码</h1><h2 id="二叉树-amp-amp-森林"><a href="#二叉树-amp-amp-森林" class="headerlink" title="二叉树&amp;&amp;森林"></a>二叉树&amp;&amp;森林</h2><h3 id="【id-740】【30分】A-【程序填空】二叉树三种遍历"><a href="#【id-740】【30分】A-【程序填空】二叉树三种遍历" class="headerlink" title="【id:740】【30分】A. 【程序填空】二叉树三种遍历"></a>【id:740】【30分】A. 【程序填空】二叉树三种遍历</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> data;        <span class="comment">//结点数据</span></span><br><span class="line">    BiTreeNode *leftChild;    <span class="comment">//左子树指针</span></span><br><span class="line">    BiTreeNode *rightChild;        <span class="comment">//右子树指针</span></span><br><span class="line">    <span class="built_in">BiTreeNode</span>():<span class="built_in">leftChild</span>(<span class="literal">NULL</span>),<span class="built_in">rightChild</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">BiTreeNode</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    BiTreeNode *root;    <span class="comment">//根结点指针</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    string sTree;</span><br><span class="line">    <span class="function">BiTreeNode *<span class="title">CreateTree</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>()&#123;&#125;;</span><br><span class="line">    ~<span class="built_in">BiTree</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Create</span><span class="params">(string vArray)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造二叉树，利用先序遍历结果建树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::Create</span><span class="params">(string vArray)</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    sTree.<span class="built_in">assign</span>(vArray);</span><br><span class="line">    root = <span class="built_in">CreateTree</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">BiTree::CreateTree</span><span class="params">()</span>    <span class="comment">//递归建树，私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTreeNode *T;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    ch=sTree[pos++];</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">new</span> <span class="built_in">BiTreeNode</span>();</span><br><span class="line">        T-&gt;data = ch;        <span class="comment">//生成根结点</span></span><br><span class="line">        T-&gt;leftChild = <span class="built_in">CreateTree</span>();    <span class="comment">//构造左子树</span></span><br><span class="line">        T-&gt;rightChild = <span class="built_in">CreateTree</span>();    <span class="comment">//构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义先序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PreOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PreOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PreOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; t-&gt;data;    <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(t-&gt;leftChild);    <span class="comment">//先序遍历t的左孩子</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(t-&gt;rightChild);    <span class="comment">//先序遍历t的右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义中序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::InOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">InOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::InOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(t-&gt;leftChild);    <span class="comment">//中序遍历t的左孩子</span></span><br><span class="line">        cout &lt;&lt; t-&gt;data;        <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">        <span class="built_in">InOrder</span>(t-&gt;rightChild);    <span class="comment">//中序遍历t的右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PostOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PostOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PostOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(t-&gt;leftChild);    <span class="comment">//后序遍历t的左孩子</span></span><br><span class="line">        <span class="built_in">PostOrder</span>(t-&gt;rightChild);    <span class="comment">//后序遍历t的右孩子</span></span><br><span class="line">        cout &lt;&lt; t-&gt;data;        <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    string vArray;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; vArray;</span><br><span class="line">        BiTree myTree;</span><br><span class="line">myTree.<span class="built_in">Create</span>(vArray);</span><br><span class="line">myTree.<span class="built_in">PreOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">myTree.<span class="built_in">InOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">myTree.<span class="built_in">PostOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-78】【20分】B-DS二叉树–叶子数量"><a href="#【id-78】【20分】B-DS二叉树–叶子数量" class="headerlink" title="【id:78】【20分】B. DS二叉树–叶子数量"></a>【id:78】【20分】B. DS二叉树–叶子数量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,c;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>()<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i+<span class="number">1</span>]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i+<span class="number">2</span>]==<span class="string">&#x27;0&#x27;</span>)c++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">        c=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-80】【20分】C-DS二叉树——二叉树之父子结点"><a href="#【id-80】【20分】C-DS二叉树——二叉树之父子结点" class="headerlink" title="【id:80】【20分】C. DS二叉树——二叉树之父子结点"></a>【id:80】【20分】C. DS二叉树——二叉树之父子结点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t,n,id=<span class="number">0</span>;</span><br><span class="line">string s,ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span>&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    NODE *l,*r;</span><br><span class="line">    <span class="built_in">NODE</span>()&#123;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">        r = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(NODE *&amp;head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id&gt;=n||s[id]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        head = <span class="literal">NULL</span>;</span><br><span class="line">        id++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="keyword">new</span> NODE;</span><br><span class="line">    head -&gt;data = s[id];</span><br><span class="line">    id++;</span><br><span class="line">    <span class="built_in">build</span>(head-&gt;l);</span><br><span class="line">    <span class="built_in">build</span>(head-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(NODE *node,NODE *fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node-&gt;l==<span class="literal">NULL</span> &amp;&amp; node-&gt;r==<span class="literal">NULL</span>)&#123;</span><br><span class="line">cout&lt;&lt;node-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">ans=ans+fa-&gt;data+<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node-&gt;l)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(node-&gt;l,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node-&gt;r)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(node-&gt;r,node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        n = s.<span class="built_in">length</span>();</span><br><span class="line">        NODE *head = <span class="keyword">new</span> NODE;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">build</span>(head);</span><br><span class="line">        <span class="built_in">dfs</span>(head,head);</span><br><span class="line">        cout&lt;&lt;endl&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-89】【10分】D-DS树–二叉树高度"><a href="#【id-89】【10分】D-DS树–二叉树高度" class="headerlink" title="【id:89】【10分】D. DS树–二叉树高度"></a>【id:89】【10分】D. DS树–二叉树高度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">Node *lchild, *rchild;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">char</span> _data) &#123;</span><br><span class="line">data = _data;</span><br><span class="line">lchild = <span class="literal">NULL</span>;</span><br><span class="line">rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Node</span>() &#123;</span><br><span class="line">lchild = <span class="literal">NULL</span>;</span><br><span class="line">rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Node</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node *root;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(Node *&amp;tree)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">tree = <span class="literal">NULL</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">tree = <span class="keyword">new</span> <span class="built_in">Node</span>(c);</span><br><span class="line"><span class="built_in">build</span>(tree-&gt;lchild);</span><br><span class="line"><span class="built_in">build</span>(tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">BinaryTree</span>() &#123;</span><br><span class="line">root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">BinaryTree</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">build</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">height</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">height</span>(node-&gt;lchild),<span class="built_in">height</span>(node-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">BinaryTree binarytree;</span><br><span class="line">binarytree.<span class="built_in">build</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">height</span>(binarytree.root)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-82】【10分】E-DS二叉树–层次遍历"><a href="#【id-82】【10分】E-DS二叉树–层次遍历" class="headerlink" title="【id:82】【10分】E. DS二叉树–层次遍历"></a>【id:82】【10分】E. DS二叉树–层次遍历</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  TreeNode* leftChild;</span><br><span class="line">  TreeNode* rightChild;</span><br><span class="line">  <span class="type">char</span> data;</span><br><span class="line"> <span class="built_in">TreeNode</span>()&#123;</span><br><span class="line">  leftChild= <span class="literal">NULL</span>;</span><br><span class="line">  rightChild= <span class="literal">NULL</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  string str;</span><br><span class="line">  TreeNode* Root;</span><br><span class="line">  <span class="type">int</span> pos;</span><br><span class="line">  <span class="function">TreeNode* <span class="title">createTree</span><span class="params">()</span></span>&#123;<span class="comment">//递归建树</span></span><br><span class="line">   TreeNode *t;</span><br><span class="line">   <span class="type">char</span> ch= str[pos++];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(ch== <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">     t= <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">    t= <span class="keyword">new</span> <span class="built_in">TreeNode</span>();</span><br><span class="line">    t-&gt;data= ch;</span><br><span class="line">    t-&gt;leftChild= <span class="built_in">createTree</span>();</span><br><span class="line">    t-&gt;rightChild= <span class="built_in">createTree</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">public</span> :</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">createTree</span><span class="params">(string st)</span></span>&#123;</span><br><span class="line">   pos= <span class="number">0</span>;</span><br><span class="line">   str= st;</span><br><span class="line"> </span><br><span class="line">   Root= <span class="built_in">createTree</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>&#123;<span class="comment">//层次遍历</span></span><br><span class="line">   queue&lt;TreeNode*&gt; que;</span><br><span class="line">   que.<span class="built_in">push</span>(Root);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    TreeNode* node= que.<span class="built_in">front</span>();</span><br><span class="line"> </span><br><span class="line">    que.<span class="built_in">pop</span>();</span><br><span class="line">    cout&lt;&lt;node-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;leftChild)</span><br><span class="line">      que.<span class="built_in">push</span>(node-&gt;leftChild);</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;rightChild)</span><br><span class="line">      que.<span class="built_in">push</span>(node-&gt;rightChild);</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="type">int</span> t;</span><br><span class="line"> cin&gt;&gt;t;</span><br><span class="line"> <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">  string str;</span><br><span class="line">  cin&gt;&gt;str;</span><br><span class="line">  Tree tree;</span><br><span class="line">  tree.<span class="built_in">createTree</span>(str);</span><br><span class="line">  tree.<span class="built_in">levelOrder</span>(); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-93】【10分】F-DS二叉树—二叉树结点的最大距离"><a href="#【id-93】【10分】F-DS二叉树—二叉树结点的最大距离" class="headerlink" title="【id:93】【10分】F. DS二叉树—二叉树结点的最大距离"></a>【id:93】【10分】F. DS二叉树—二叉树结点的最大距离</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> M[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> L[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> R[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> I = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    BiTreeNode* Left;</span><br><span class="line">    BiTreeNode* Right;</span><br><span class="line">    <span class="built_in">BiTreeNode</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        Left = <span class="literal">NULL</span>;</span><br><span class="line">        Right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">BiTreeNode</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> Left;</span><br><span class="line">        <span class="keyword">delete</span> Right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BiTreeNode* Root;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    string strTree;</span><br><span class="line">    <span class="type">int</span> deep;</span><br><span class="line">    <span class="type">int</span> leftdeep;</span><br><span class="line">    <span class="type">int</span> rightdeep;</span><br><span class="line">    <span class="type">char</span> leftc;</span><br><span class="line">    <span class="type">char</span> rightc;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> maxx;</span><br><span class="line">    <span class="built_in">BiTree</span>(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = <span class="number">0</span>;</span><br><span class="line">        deep = <span class="number">0</span>;</span><br><span class="line">        leftdeep = <span class="number">0</span>;</span><br><span class="line">        rightdeep = <span class="number">0</span>;</span><br><span class="line">        maxx = <span class="number">0</span>;</span><br><span class="line">        strTree = str;</span><br><span class="line">        Root = <span class="built_in">CreateBiTree</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">BiTreeNode* <span class="title">CreateBiTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">char</span> ch = strTree[pos];</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            BiTreeNode* T;</span><br><span class="line">            T = <span class="keyword">new</span> <span class="built_in">BiTreeNode</span>();</span><br><span class="line">            T-&gt;data = ch;</span><br><span class="line">            T-&gt;Left = <span class="built_in">CreateBiTree</span>();</span><br><span class="line">            T-&gt;Right = <span class="built_in">CreateBiTree</span>();</span><br><span class="line">            <span class="keyword">return</span> T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">countleftdeep</span><span class="params">(BiTreeNode* p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            leftdeep = <span class="number">0</span>;</span><br><span class="line">            leftc = p-&gt;data;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;Left;</span><br><span class="line">        <span class="built_in">countdeep</span>(p, <span class="number">0</span>);</span><br><span class="line">        leftdeep = deep;</span><br><span class="line">        leftc = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">countrightdeep</span><span class="params">(BiTreeNode* p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rightdeep = <span class="number">0</span>;</span><br><span class="line">            rightc = p-&gt;data;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;Right;</span><br><span class="line">        <span class="built_in">countdeep</span>(p, <span class="number">0</span>);</span><br><span class="line">        rightdeep = deep;</span><br><span class="line">        rightc = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">countdeep</span><span class="params">(BiTreeNode* p, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;Left == <span class="literal">NULL</span> &amp;&amp; p-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (deep &lt; i)</span><br><span class="line">                &#123;</span><br><span class="line">                    deep = i;</span><br><span class="line">                    c = p-&gt;data;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">countdeep</span>(p-&gt;Left, i);</span><br><span class="line">            <span class="built_in">countdeep</span>(p-&gt;Right, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(BiTreeNode* p)</span><span class="comment">//</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            deep = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">countleftdeep</span>(p);<span class="comment">//</span></span><br><span class="line">            deep = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">countrightdeep</span>(p);<span class="comment">//</span></span><br><span class="line">            deep = <span class="number">0</span>;</span><br><span class="line">            maxx = leftdeep + rightdeep;</span><br><span class="line">            M[I] = maxx;</span><br><span class="line">            L[I] = leftc;</span><br><span class="line">            R[I] = rightc;</span><br><span class="line">            I++;</span><br><span class="line">            <span class="built_in">pre</span>(p-&gt;Left);</span><br><span class="line">            <span class="built_in">pre</span>(p-&gt;Right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; I; i++)</span><br><span class="line">            M[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(L, <span class="number">0</span>, <span class="built_in">sizeof</span>(L));</span><br><span class="line">        <span class="built_in">memset</span>(R, <span class="number">0</span>, <span class="built_in">sizeof</span>(L));</span><br><span class="line">        I = <span class="number">0</span>;</span><br><span class="line">        string str;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="function">BiTree <span class="title">tree</span><span class="params">(str)</span></span>;</span><br><span class="line">        tree.<span class="built_in">pre</span>(tree.Root);</span><br><span class="line">        <span class="type">int</span> m = M[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; I; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (M[i] &gt; m)</span><br><span class="line">                index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; M[index] &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (M[index] != <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; L[index] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; R[index] &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h2><h3 id="【id-741】【30分】A-【程序填空】赫夫曼编码"><a href="#【id-741】【30分】A-【程序填空】赫夫曼编码" class="headerlink" title="【id:741】【30分】A. 【程序填空】赫夫曼编码"></a>【id:741】【30分】A. 【程序填空】赫夫曼编码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxW = <span class="number">9999</span>;   <span class="comment">//设定无穷大权值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Huffman树结点结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffNode</span> &#123;<span class="comment">//哈夫曼树的结点结构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> weight;<span class="comment">//权值</span></span><br><span class="line"><span class="type">int</span> parent;<span class="comment">//双亲下标</span></span><br><span class="line"><span class="type">int</span> lchild;<span class="comment">//左孩子下标</span></span><br><span class="line"><span class="type">int</span> rchild;<span class="comment">//右孩子下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Huffman树结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffMan</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> len;<span class="comment">//结点总数，等于lnum*2-1</span></span><br><span class="line"><span class="type">int</span> lnum;<span class="comment">//叶子数量</span></span><br><span class="line">HuffNode *HuffTree;<span class="comment">//保存构建后的赫夫曼树信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectMin</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;x1, <span class="type">int</span> &amp;x2)</span></span>;  </span><br><span class="line"><span class="comment">//函数selectMin是从已生成的n个结点中(包含叶子)，选出未选的且权值最小的两个结点的下标</span></span><br><span class="line"><span class="comment">//两个下标结果保存在x1和x2中</span></span><br><span class="line"><span class="comment">//第一小权值的结点下标保存在x1，第二小权值的结点下标保存在x2</span></span><br><span class="line"><span class="comment">//如果不想用这个函数，就在类外定义中定义一个空函数体，避免语法错误</span></span><br><span class="line"></span><br><span class="line">    string *HuffCode; <span class="comment">//保存叶子的赫夫曼编码</span></span><br><span class="line"><span class="type">char</span> ** HC;<span class="comment">//保存叶子的赫夫曼编码</span></span><br><span class="line"><span class="comment">//如果不喜欢用string，可以用二维字符数组HC</span></span><br><span class="line"><span class="comment">//HuffCode和HC，两者只用一个保存赫夫曼编码就可以了 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HuffMan</span>(<span class="type">int</span> n,<span class="type">int</span> w[]); <span class="comment">//输入叶子数量和叶子权重，初始化HuffTree和HuffCode（或HC）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">()</span></span>;<span class="comment">//构建赫夫曼树，保存在HuffTree中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coding</span><span class="params">()</span></span>;<span class="comment">//生成赫夫曼编码，保存在HuffCode或HC中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printCode</span><span class="params">()</span></span>;<span class="comment">//输出赫夫曼编码</span></span><br><span class="line">~<span class="built_in">HuffMan</span>();<span class="comment">//回收空间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请完成Huffman树的剩下部分类定义</span></span><br><span class="line"><span class="comment">/********** Write your code here! **********/</span></span><br><span class="line">HuffMan::<span class="built_in">HuffMan</span>(<span class="type">int</span> n,<span class="type">int</span> w[])&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    lnum = n;</span><br><span class="line">    len = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    HuffTree = <span class="keyword">new</span> HuffNode[<span class="number">2</span> * n];</span><br><span class="line">    HuffCode = <span class="keyword">new</span> string[lnum + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        HuffTree[i].weight = w[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n)</span><br><span class="line">            HuffTree[i].weight = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].parent = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].lchild = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].rchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::selectMin</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;x1, <span class="type">int</span> &amp;x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> w1, w2, i;</span><br><span class="line">    w1 = w2 = maxW;</span><br><span class="line">    x1 = x2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HuffTree[i].weight &lt; w1 &amp;&amp; HuffTree[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w2 = w1;</span><br><span class="line">            x2 = x1;</span><br><span class="line">            x1 = i;</span><br><span class="line">            w1 = HuffTree[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (HuffTree[i].weight &lt; w2 &amp;&amp; HuffTree[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x2 = i;</span><br><span class="line">            w2 = HuffTree[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::buildTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> i, s1, s2;</span><br><span class="line">    <span class="keyword">for</span> (i = lnum + <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">selectMin</span>(i - <span class="number">1</span>, s1, s2);</span><br><span class="line">        HuffTree[s1].parent = i;</span><br><span class="line">        HuffTree[s2].parent = i;</span><br><span class="line">        HuffTree[i].lchild = s1;</span><br><span class="line">        HuffTree[i].rchild = s2;</span><br><span class="line">        HuffTree[i].weight = HuffTree[s1].weight + HuffTree[s2].weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::Coding</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> *cd;</span><br><span class="line">    <span class="type">int</span> i, c, f, start;</span><br><span class="line">    cd = <span class="keyword">new</span> <span class="type">char</span>[lnum];</span><br><span class="line">    cd[lnum - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= lnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        start = lnum - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (c = i, f = HuffTree[i].parent; f != <span class="number">0</span>; c = f, f = HuffTree[f].parent)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (HuffTree[f].lchild == c)</span><br><span class="line">            &#123;</span><br><span class="line">                start--;</span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                start--;</span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HuffCode[i].<span class="built_in">assign</span>(&amp;cd[start]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] cd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::printCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; HuffTree[j].weight &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            cout &lt;&lt; HuffCode[j] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">HuffMan::~<span class="built_in">HuffMan</span>()&#123;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    lnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] HuffTree;</span><br><span class="line">    <span class="keyword">delete</span>[] HuffCode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************/</span></span><br><span class="line"><span class="comment">//主函数如下</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> n, wt[<span class="number">100</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;wt[i];</span><br><span class="line"><span class="function">HuffMan <span class="title">huff</span><span class="params">(n,wt)</span></span>;</span><br><span class="line">huff.<span class="built_in">buildTree</span>();</span><br><span class="line">huff.<span class="built_in">Coding</span>();</span><br><span class="line">huff.<span class="built_in">printCode</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-742】【20分】B-【程序填空】赫夫曼解码"><a href="#【id-742】【20分】B-【程序填空】赫夫曼解码" class="headerlink" title="【id:742】【20分】B. 【程序填空】赫夫曼解码"></a>【id:742】【20分】B. 【程序填空】赫夫曼解码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxW = <span class="number">9999</span>;   <span class="comment">//设定无穷大权值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Huffman树结点结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffNode</span> &#123;<span class="comment">//哈夫曼树的结点结构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">char</span> letter;<span class="comment">//结点对应的字符</span></span><br><span class="line"><span class="type">int</span> weight;<span class="comment">//权值</span></span><br><span class="line"><span class="type">int</span> parent;<span class="comment">//双亲下标</span></span><br><span class="line"><span class="type">int</span> lchild;<span class="comment">//左孩子下标</span></span><br><span class="line"><span class="type">int</span> rchild;<span class="comment">//右孩子下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Huffman树结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffMan</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> len;<span class="comment">//结点总数，等于lnum*2-1</span></span><br><span class="line"><span class="type">int</span> lnum;<span class="comment">//叶子数量</span></span><br><span class="line">HuffNode *HuffTree;<span class="comment">//保存构建后的赫夫曼树信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectMin</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;x1, <span class="type">int</span> &amp;x2)</span></span>;  </span><br><span class="line"><span class="comment">//函数selectMin是从已生成的n个结点中(包含叶子)，选出未选的且权值最小的两个结点的下标</span></span><br><span class="line"><span class="comment">//两个下标结果保存在x1和x2中</span></span><br><span class="line"><span class="comment">//第一小权值的结点下标保存在x1，第二小权值的结点下标保存在x2</span></span><br><span class="line"><span class="comment">//如果不想用这个函数，就在类外定义中定义一个空函数体，避免语法错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HuffMan</span>(<span class="type">int</span> n,<span class="type">int</span> w[], <span class="type">char</span> c[]); </span><br><span class="line"><span class="comment">//构造函数HuffMan根据输入叶子数量、叶子权重、字符集合，初始化HuffTree</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">()</span></span>;<span class="comment">//构建赫夫曼树，保存在HuffTree中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decoding</span><span class="params">(string cs)</span></span>;</span><br><span class="line"><span class="comment">//函数Decoding是根据参数编码串cs进行赫夫曼解码</span></span><br><span class="line"><span class="comment">//如果编码串cs有错，函数Decoding直接输出error，不输出已解码的字符</span></span><br><span class="line">~<span class="built_in">HuffMan</span>();<span class="comment">//回收HuffTree空间  </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//以下完成Huffman类的定义填空</span></span><br><span class="line"><span class="comment">/********** Write your code here! **********/</span></span><br><span class="line">HuffMan::<span class="built_in">HuffMan</span>(<span class="type">int</span> n,<span class="type">int</span> w[], <span class="type">char</span> c[])&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    lnum = n;</span><br><span class="line">    len = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    HuffTree = <span class="keyword">new</span> HuffNode[<span class="number">2</span> * n];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        HuffTree[i].weight = w[i - <span class="number">1</span>];</span><br><span class="line">        HuffTree[i].letter = c[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n)</span><br><span class="line">            HuffTree[i].weight = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].parent = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].lchild = <span class="number">0</span>;</span><br><span class="line">        HuffTree[i].rchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::buildTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> i, s1, s2;</span><br><span class="line">    <span class="keyword">for</span> (i = lnum + <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">selectMin</span>(i - <span class="number">1</span>, s1, s2);</span><br><span class="line">        HuffTree[s1].parent = i;</span><br><span class="line">        HuffTree[s2].parent = i;</span><br><span class="line">        HuffTree[i].lchild = s1;</span><br><span class="line">        HuffTree[i].rchild = s2;</span><br><span class="line">        HuffTree[i].weight = HuffTree[s1].weight + HuffTree[s2].weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::selectMin</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;x1, <span class="type">int</span> &amp;x2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> w1, w2, i;</span><br><span class="line">    w1 = w2 = maxW;</span><br><span class="line">    x1 = x2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (HuffTree[i].weight &lt; w1 &amp;&amp; HuffTree[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w2 = w1;</span><br><span class="line">            x2 = x1;</span><br><span class="line">            x1 = i;</span><br><span class="line">            w1 = HuffTree[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (HuffTree[i].weight &lt; w2 &amp;&amp; HuffTree[i].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x2 = i;</span><br><span class="line">            w2 = HuffTree[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffMan::Decoding</span><span class="params">(string cs)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k, c,flag=<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    c = len;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> txtstr[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cs.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = cs[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c = HuffTree[c].lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c = HuffTree[c].rchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!HuffTree[c].lchild &amp;&amp; !HuffTree[c].rchild)</span><br><span class="line">        &#123;</span><br><span class="line">            txtstr[k] = HuffTree[c].letter;</span><br><span class="line">            k++;</span><br><span class="line">            c = len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ch = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        txtstr[k] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; txtstr &lt;&lt; endl;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">HuffMan::~<span class="built_in">HuffMan</span>()&#123;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    lnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] HuffTree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> i, n, wt[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> ct[<span class="number">100</span>];</span><br><span class="line">string cstr;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;wt[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;ct[i];</span><br><span class="line"><span class="function">HuffMan <span class="title">huff</span><span class="params">(n,wt, ct)</span></span>;</span><br><span class="line">huff.<span class="built_in">buildTree</span>();<span class="comment">//构建赫夫曼树</span></span><br><span class="line"></span><br><span class="line">cin&gt;&gt;i;</span><br><span class="line"><span class="keyword">while</span> (i--)</span><br><span class="line">&#123;cin&gt;&gt;cstr;</span><br><span class="line">huff.<span class="built_in">Decoding</span>(cstr); <span class="comment">//赫夫曼解码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-88】【20分】C-DS树–带权路径和"><a href="#【id-88】【20分】C-DS树–带权路径和" class="headerlink" title="【id:88】【20分】C. DS树–带权路径和"></a>【id:88】【20分】C. DS树–带权路径和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    BiTreeNode *LeftChild;</span><br><span class="line">    BiTreeNode *RightChild;</span><br><span class="line">    BiTreeNode *Parent;</span><br><span class="line">    <span class="type">int</span> Length;</span><br><span class="line">    <span class="built_in">BiTreeNode</span>():<span class="built_in">LeftChild</span>(<span class="literal">NULL</span>),<span class="built_in">RightChild</span>(<span class="literal">NULL</span>),<span class="built_in">Parent</span>(<span class="literal">NULL</span>),<span class="built_in">Length</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateTree</span><span class="params">(string s)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetLength</span><span class="params">(<span class="type">int</span> *a)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    string strTree;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">FindParent</span><span class="params">(BiTreeNode *t,<span class="type">int</span> sum)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetLength</span><span class="params">(BiTreeNode *t, <span class="type">int</span> *a)</span></span>;</span><br><span class="line">    <span class="function">BiTreeNode *<span class="title">CreateTree</span><span class="params">()</span></span>;</span><br><span class="line">    BiTreeNode *Root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BiTree::FindParent</span><span class="params">(BiTreeNode *t,<span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t-&gt;Parent!=Root&amp;&amp;t-&gt;Parent)</span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        sum = <span class="built_in">FindParent</span>(t-&gt;Parent,sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::SetLength</span><span class="params">(<span class="type">int</span> *a)</span> </span>&#123; <span class="built_in">SetLength</span>(Root,a); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::SetLength</span><span class="params">(BiTreeNode *t, <span class="type">int</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SetLength</span>(t-&gt;LeftChild,a);</span><br><span class="line">        <span class="built_in">SetLength</span>(t-&gt;RightChild,a);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;LeftChild==<span class="literal">NULL</span>&amp;&amp;t-&gt;RightChild==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="built_in">FindParent</span>(t,<span class="number">1</span>);</span><br><span class="line">            t-&gt;Length = a[pos2++]*k;</span><br><span class="line">            total += t-&gt;Length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::CreateTree</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    strTree.<span class="built_in">assign</span>(s);</span><br><span class="line">    Root = <span class="built_in">CreateTree</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">BiTree::CreateTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTreeNode *T;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    ch = strTree[pos++];</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        T = <span class="keyword">new</span> <span class="built_in">BiTreeNode</span>();</span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        T-&gt;LeftChild = <span class="built_in">CreateTree</span>();</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;LeftChild)</span><br><span class="line">             T-&gt;LeftChild-&gt;Parent = T;</span><br><span class="line">        T-&gt;RightChild = <span class="built_in">CreateTree</span>();</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;RightChild)</span><br><span class="line">            T-&gt;RightChild-&gt;Parent = T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        BiTree biTree;</span><br><span class="line">        biTree.<span class="built_in">CreateTree</span>(s);</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> a[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            cin&gt;&gt;a[j];</span><br><span class="line">        pos2=<span class="number">0</span>;</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        biTree.<span class="built_in">SetLength</span>(a);</span><br><span class="line">        cout&lt;&lt;total&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-90】【10分】D-DS树–二叉树之最大路径"><a href="#【id-90】【10分】D-DS树–二叉树之最大路径" class="headerlink" title="【id:90】【10分】D. DS树–二叉树之最大路径"></a>【id:90】【10分】D. DS树–二叉树之最大路径</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line"><span class="type">int</span> road[<span class="number">99</span>];</span><br><span class="line"><span class="type">int</span> uIndex;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">char</span> data;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        Node * lChild;</span><br><span class="line">        Node * rChild;</span><br><span class="line">        <span class="built_in">Node</span>():<span class="built_in">lChild</span>(<span class="literal">NULL</span>),<span class="built_in">rChild</span>(<span class="literal">NULL</span>)&#123;&#125;;</span><br><span class="line">        ~<span class="built_in">Node</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Node* root;</span><br><span class="line">        string strTree;</span><br><span class="line">        <span class="type">int</span> pos;</span><br><span class="line">        <span class="type">int</span> npos;</span><br><span class="line">        <span class="type">int</span> depth;</span><br><span class="line">        <span class="function">Node* <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">( Node *t)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(string s)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">()</span></span>;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::create</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    strTree.<span class="built_in">assign</span>(s);</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    npos = <span class="number">0</span>;</span><br><span class="line">    root = <span class="built_in">create</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">BiTree::create</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node* T;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> nu;</span><br><span class="line">    ch = strTree[pos++];</span><br><span class="line">    <span class="keyword">if</span>( ch==<span class="string">&#x27;0&#x27;</span> )&#123;</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        nu = a[npos++];</span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        T-&gt;num = nu;</span><br><span class="line">        T-&gt;lChild = <span class="built_in">create</span>();</span><br><span class="line">        T-&gt;rChild = <span class="built_in">create</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">preOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::preOrder</span><span class="params">( Node *t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;lChild &amp;&amp; t-&gt;rChild)&#123;</span><br><span class="line">            t-&gt;lChild-&gt;num += t-&gt;num;</span><br><span class="line">            t-&gt;rChild-&gt;num += t-&gt;num;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;lChild)&#123;</span><br><span class="line">            t-&gt;lChild-&gt;num += t-&gt;num;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;rChild)&#123;</span><br><span class="line">            t-&gt;rChild-&gt;num += t-&gt;num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            road[uIndex++] = t-&gt;num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;lChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;rChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> st;</span><br><span class="line">    cin&gt;&gt;st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;st; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(road,<span class="number">0</span>,<span class="built_in">sizeof</span>(road));</span><br><span class="line">        uIndex = <span class="number">0</span>;</span><br><span class="line">        string ss;</span><br><span class="line">        cin &gt;&gt; ss;</span><br><span class="line">        cin &gt;&gt; len;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        BiTree *bt = <span class="keyword">new</span> BiTree;</span><br><span class="line">        bt-&gt;<span class="built_in">create</span>(ss);</span><br><span class="line">        bt-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;uIndex; i++)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,road[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">delete</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-94】【10分】E-DS二叉树—二叉树镜面反转"><a href="#【id-94】【10分】E-DS二叉树—二叉树镜面反转" class="headerlink" title="【id:94】【10分】E. DS二叉树—二叉树镜面反转"></a>【id:94】【10分】E. DS二叉树—二叉树镜面反转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> data;        <span class="comment">//结点数据</span></span><br><span class="line">    BiTreeNode *leftChild;    <span class="comment">//左子树指针</span></span><br><span class="line">    BiTreeNode *rightChild;        <span class="comment">//右子树指针</span></span><br><span class="line">    <span class="built_in">BiTreeNode</span>():<span class="built_in">leftChild</span>(<span class="literal">NULL</span>),<span class="built_in">rightChild</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">BiTreeNode</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    BiTreeNode *root;    <span class="comment">//根结点指针</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    string sTree;</span><br><span class="line">    <span class="function">BiTreeNode *<span class="title">CreateTree</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">(BiTreeNode *t)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>()&#123;&#125;;</span><br><span class="line">    ~<span class="built_in">BiTree</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Create</span><span class="params">(string vArray)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造二叉树，利用先序遍历结果建树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::Create</span><span class="params">(string vArray)</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    sTree.<span class="built_in">assign</span>(vArray);</span><br><span class="line">    root = <span class="built_in">CreateTree</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">BiTree::CreateTree</span><span class="params">()</span>    <span class="comment">//递归建树，私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTreeNode *T;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    ch=sTree[pos++];</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">new</span> <span class="built_in">BiTreeNode</span>();</span><br><span class="line">        T-&gt;data = ch;        <span class="comment">//生成根结点</span></span><br><span class="line">        T-&gt;leftChild = <span class="built_in">CreateTree</span>();    <span class="comment">//构造左子树</span></span><br><span class="line">        T-&gt;rightChild = <span class="built_in">CreateTree</span>();    <span class="comment">//构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义先序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PreOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PreOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PreOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; t-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;    <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(t-&gt;rightChild);    <span class="comment">//先序遍历t的右孩子</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(t-&gt;leftChild);    <span class="comment">//先序遍历t的左孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义中序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::InOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">InOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::InOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(t-&gt;rightChild);    <span class="comment">//中序遍历t的左孩子</span></span><br><span class="line">        cout &lt;&lt; t-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;        <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">        <span class="built_in">InOrder</span>(t-&gt;leftChild);    <span class="comment">//中序遍历t的右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PostOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PostOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::PostOrder</span><span class="params">(BiTreeNode *t)</span>    <span class="comment">//私有函数，类内实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(t-&gt;rightChild);    <span class="comment">//后序遍历t的左孩子</span></span><br><span class="line">        <span class="built_in">PostOrder</span>(t-&gt;leftChild);    <span class="comment">//后序遍历t的右孩子</span></span><br><span class="line">        cout &lt;&lt; t-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;        <span class="comment">//输出当前结点t的数据，表示t已经访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层序遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::levelOrder</span><span class="params">()</span>    <span class="comment">//公有函数，对外接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">levelOrder</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::levelOrder</span><span class="params">(BiTreeNode *t)</span></span>&#123;<span class="comment">//层次遍历</span></span><br><span class="line">   queue&lt;BiTreeNode*&gt; que;</span><br><span class="line">   que.<span class="built_in">push</span>(root);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    BiTreeNode* node= que.<span class="built_in">front</span>();</span><br><span class="line"> </span><br><span class="line">    que.<span class="built_in">pop</span>();</span><br><span class="line">    cout&lt;&lt;node-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;rightChild)</span><br><span class="line">      que.<span class="built_in">push</span>(node-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;leftChild)</span><br><span class="line">      que.<span class="built_in">push</span>(node-&gt;leftChild);    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    string vArray;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; vArray;</span><br><span class="line">        <span class="keyword">if</span>(vArray == <span class="string">&quot;#&quot;</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BiTree myTree;</span><br><span class="line">myTree.<span class="built_in">Create</span>(vArray);</span><br><span class="line">myTree.<span class="built_in">PreOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">myTree.<span class="built_in">InOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">myTree.<span class="built_in">PostOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">        myTree.<span class="built_in">levelOrder</span>();cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-101】【10分】F-DS二叉树判断–同一棵二叉树？"><a href="#【id-101】【10分】F-DS二叉树判断–同一棵二叉树？" class="headerlink" title="【id:101】【10分】F. DS二叉树判断–同一棵二叉树？"></a>【id:101】【10分】F. DS二叉树判断–同一棵二叉树？</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiNode</span>&#123;</span><br><span class="line">    BiNode *lChild;</span><br><span class="line">    BiNode *rChild;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiNode</span>():<span class="built_in">lChild</span>(<span class="literal">NULL</span>),<span class="built_in">rChild</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">BiNode</span>(<span class="type">char</span> e):<span class="built_in">data</span>(e),<span class="built_in">lChild</span>(<span class="literal">NULL</span>),<span class="built_in">rChild</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">BiTree</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span>&#123;</span><br><span class="line">    BiNode *root;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    queue&lt;BiNode*&gt; que;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateTree</span><span class="params">(BiNode *&amp;t)</span></span>;</span><br><span class="line">    string str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>();</span><br><span class="line">    ~<span class="built_in">BiTree</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateTree</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiNode *p;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(i!=len)&#123;</span><br><span class="line">        p = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data!=str[i])&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            que.<span class="built_in">push</span>(p-&gt;lChild);</span><br><span class="line">            que.<span class="built_in">push</span>(p-&gt;rChild);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BiTree::<span class="built_in">BiTree</span>() &#123;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    len = str.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BiTree::~<span class="built_in">BiTree</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::CreateTree</span><span class="params">(BiNode *&amp;t)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> e;</span><br><span class="line">    cin &gt;&gt; e;</span><br><span class="line">    <span class="keyword">if</span>( e!=<span class="string">&#x27;#&#x27;</span> )&#123;</span><br><span class="line">        t = <span class="keyword">new</span> <span class="built_in">BiNode</span>(e);</span><br><span class="line">        <span class="built_in">CreateTree</span>(t-&gt;lChild);</span><br><span class="line">        <span class="built_in">CreateTree</span>(t-&gt;rChild);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t = <span class="keyword">new</span> <span class="built_in">BiNode</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BiTree::CreateTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">CreateTree</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        BiTree myTree;</span><br><span class="line">        myTree.<span class="built_in">CreateTree</span>();</span><br><span class="line">        myTree.<span class="built_in">BFS</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树综合"><a href="#树综合" class="headerlink" title="树综合"></a>树综合</h2><h3 id="【id-743】【20分】A-树的先序遍历（双亲表示法）"><a href="#【id-743】【20分】A-树的先序遍历（双亲表示法）" class="headerlink" title="【id:743】【20分】A. 树的先序遍历（双亲表示法）"></a>【id:743】【20分】A. 树的先序遍历（双亲表示法）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">treenode</span>&#123;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="type">int</span> parent;</span><br><span class="line">&#125;treenode; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">treenode node[MAX_SIZE];</span><br><span class="line"><span class="type">int</span> nodenum;<span class="comment">//结点数 </span></span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitTree</span><span class="params">(Tree &amp;T)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAX_SIZE;i++)&#123;</span><br><span class="line">T.node[i].data=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">T.node[i].parent=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">T.nodenum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateTree</span><span class="params">(Tree &amp;T)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nodenum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> parent;</span><br><span class="line"><span class="type">char</span> node1,node2,node;</span><br><span class="line">cin&gt;&gt;nodenum;</span><br><span class="line">parent=nodenum<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nodenum;i++)&#123;</span><br><span class="line">cin&gt;&gt;node;</span><br><span class="line"><span class="keyword">if</span>(node!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">T.node[T.nodenum++].data=node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nodenum;i++)&#123;</span><br><span class="line">cin&gt;&gt;parent;</span><br><span class="line"><span class="keyword">if</span>(parent!=<span class="number">-1</span>)&#123;</span><br><span class="line">T.node[i].parent=parent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(Tree T,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;T.nodenum;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T.node[j].parent==i)&#123;</span><br><span class="line">cout&lt;&lt;T.node[j].data;</span><br><span class="line"><span class="built_in">PreOrder</span>(T,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">Tree t1;</span><br><span class="line"><span class="built_in">InitTree</span>(t1);</span><br><span class="line"><span class="built_in">CreateTree</span>(t1);</span><br><span class="line"><span class="built_in">PreOrder</span>(t1,<span class="number">-1</span>);</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-744】【20分】B-树的后根遍历（孩子链表法）"><a href="#【id-744】【20分】B-树的后根遍历（孩子链表法）" class="headerlink" title="【id:744】【20分】B. 树的后根遍历（孩子链表法）"></a>【id:744】【20分】B. 树的后根遍历（孩子链表法）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从左往右打开节点，若为-1，则输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> child[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(Node N[], <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; N[r].child[i] != <span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">Print</span>(N, N[r].child[i]);</span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; N[r].c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">Node N[n];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; N[i].c;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;; j++) &#123;</span><br><span class="line">cin &gt;&gt; N[i].child[j];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (N[i].child[j] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Print</span>(N, m);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-745】【20分】C-树结构转换（先序转双亲）"><a href="#【id-745】【20分】C-树结构转换（先序转双亲）" class="headerlink" title="【id:745】【20分】C. 树结构转换（先序转双亲）"></a>【id:745】【20分】C. 树结构转换（先序转双亲）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">Node *left;</span><br><span class="line">Node *right;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">char</span> e): <span class="built_in">data</span>(e), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">Node *root;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Node *&amp;t)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Node *&amp;t)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Tree</span>(): <span class="built_in">root</span>(<span class="literal">NULL</span>), <span class="built_in">len</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">create</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">del</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tree::create</span><span class="params">(Node *&amp;t)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">len++;</span><br><span class="line">t = <span class="keyword">new</span> <span class="built_in">Node</span>(c);</span><br><span class="line"><span class="built_in">create</span>(t-&gt;left);</span><br><span class="line"><span class="built_in">create</span>(t-&gt;right);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">t = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tree::del</span><span class="params">(Node *&amp;t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!t) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">del</span>(t-&gt;left);</span><br><span class="line">    <span class="built_in">del</span>(t-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line">    t = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">Tree T;</span><br><span class="line">T.<span class="built_in">create</span>();</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">par</span> &#123;</span><br><span class="line">Node *N;</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line">&#125; P[T.<span class="built_in">getlen</span>()];</span><br><span class="line">P[<span class="number">0</span>].N = T.<span class="built_in">getRoot</span>();</span><br><span class="line">P[<span class="number">0</span>].p = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; T.<span class="built_in">getlen</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (P[i].N-&gt;left) &#123;</span><br><span class="line">P[j].N = P[i].N-&gt;left;</span><br><span class="line">P[j++].p = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (P[i].N-&gt;right) &#123;</span><br><span class="line">P[j].N = P[i].N-&gt;right;</span><br><span class="line">P[j++].p = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; T.<span class="built_in">getlen</span>() - <span class="number">1</span>; i++)</span><br><span class="line">cout &lt;&lt; P[i].N-&gt;data &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; P[i].N-&gt;data &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; T.<span class="built_in">getlen</span>() - <span class="number">1</span>; i++)</span><br><span class="line">cout &lt;&lt; P[i].p &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; P[i].p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">T.<span class="built_in">del</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-95】【15分】D-DS树–找出直系亲属"><a href="#【id-95】【15分】D-DS树–找出直系亲属" class="headerlink" title="【id:95】【15分】D. DS树–找出直系亲属"></a>【id:95】【15分】D. DS树–找出直系亲属</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> son[MAXN];      <span class="comment">//父节点是儿子，所以以son命名</span></span><br><span class="line"><span class="type">int</span> height[MAXN];    <span class="comment">//表示结点高度，最小的儿子高度为0，越往下辈分越大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集思想</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Initial</span><span class="params">()</span></span>&#123;                <span class="comment">//初始化函数  父节点默认设为自己，高度默认为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line">        son[i] = i;</span><br><span class="line">        height[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> count)</span></span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(son[x]==son[y] &amp;&amp; x!=y &amp;&amp; son[x]!=x &amp;&amp; son[y]!=y) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//若当前两个节点的父节点是同一个，即拥有同个儿子，则不是直系</span></span><br><span class="line">    <span class="keyword">if</span>(height[x]&lt;height[y])&#123;  <span class="comment">//高度高的辈分大，则辈分高取自己的儿子，然后递归find，count作为记录取儿子的次数，取一次表面差一个辈分</span></span><br><span class="line">        y = son[y];</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(x,y,count);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height[x]&gt;height[y])&#123;  <span class="comment">//同理</span></span><br><span class="line">        x = son[x];</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find</span>(x,y,count);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">Initial</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            string str;</span><br><span class="line">            cin &gt;&gt; str;</span><br><span class="line">            <span class="type">int</span> a = str[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>;    </span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">1</span>]!=<span class="string">&#x27;-&#x27;</span>)&#123;  </span><br><span class="line">                <span class="type">int</span> b = str[<span class="number">1</span>] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                son[b] = a;  </span><br><span class="line">                height[b] = <span class="number">1</span> + height[a]; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">2</span>]!=<span class="string">&#x27;-&#x27;</span>)&#123;  </span><br><span class="line">               <span class="type">int</span> c = str[<span class="number">2</span>] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">               son[c] = a;</span><br><span class="line">               height[c] = <span class="number">1</span> + height[a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            string str;</span><br><span class="line">            cin &gt;&gt; str;</span><br><span class="line">            <span class="type">int</span> a = str[<span class="number">0</span>]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> b = str[<span class="number">1</span>]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(height[a]&gt;=height[b])&#123;  </span><br><span class="line">            <span class="type">int</span> ans = <span class="built_in">Find</span>(a,b,<span class="number">0</span>);</span><br><span class="line">            string str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">1</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;parent&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">2</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;grandparent&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;grandparent&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span>(ans&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                    str1 = <span class="string">&quot;great-&quot;</span> + str1;</span><br><span class="line">                    ans--;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(height[a]&lt;height[b])&#123;  </span><br><span class="line">            <span class="type">int</span> ans = <span class="built_in">Find</span>(a,b,<span class="number">0</span>);</span><br><span class="line">            string str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">1</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;child&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">2</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;grandchild&quot;</span>;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ans&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                str1 += <span class="string">&quot;grandchild&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span>(ans&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                    str1 = <span class="string">&quot;great-&quot;</span> + str1;</span><br><span class="line">                    ans--;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-92】【15分】E-DS森林叶子编码"><a href="#【id-92】【15分】E-DS森林叶子编码" class="headerlink" title="【id:92】【15分】E. DS森林叶子编码"></a>【id:92】【15分】E. DS森林叶子编码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N,B;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> date;</span><br><span class="line">    TreeNode *child[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Forest</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TreeNode</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">            child[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    BiTNode *lchild, *rchild;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Forest</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTNode</span>()&#123;</span><br><span class="line">        lchild = <span class="literal">NULL</span>;</span><br><span class="line">        rchild = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Forest</span>&#123;</span><br><span class="line">    TreeNode *root1[<span class="number">50</span>];</span><br><span class="line">    BiTNode *root2[<span class="number">50</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrderTraverse</span><span class="params">(TreeNode *&amp;p)</span></span>&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        cin&gt;&gt;ch;</span><br><span class="line">        <span class="keyword">if</span>(ch!=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> TreeNode;</span><br><span class="line">            p-&gt;date = ch;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;B; i++)</span><br><span class="line">                <span class="built_in">PreOrderTraverse</span>(p-&gt;child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//输入0字符则对应结点为空</span></span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">TreeIntoBiTree</span><span class="params">(TreeNode *p, BiTNode *&amp;q, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B &amp;&amp; p-&gt;child[i])</span><br><span class="line">        &#123;</span><br><span class="line">            q = <span class="keyword">new</span> BiTNode;</span><br><span class="line">            q-&gt;data = p-&gt;child[i]-&gt;date;</span><br><span class="line">            <span class="built_in">TreeIntoBiTree</span>(p, q-&gt;rchild, i+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">TreeIntoBiTree</span>(p-&gt;child[i], q-&gt;lchild, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==B) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">TreeIntoBiTree</span>(p,q,i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==B<span class="number">-1</span>)&#123;</span><br><span class="line">                q = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">call</span><span class="params">(BiTNode *p, string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">if</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">call</span>(p-&gt;lchild, s + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">call</span>(p-&gt;rchild, s + <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;lchild &amp;&amp; !p-&gt;rchild)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i!=len<span class="number">-1</span>)</span><br><span class="line">                        cout&lt;&lt;s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        cout&lt;&lt;s[i]&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Forest</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">            root1[i] = <span class="literal">NULL</span>;</span><br><span class="line">            root2[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="built_in">PreOrderTraverse</span>(root1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ForestIntoBiTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            root2[i] = <span class="keyword">new</span> BiTNode;</span><br><span class="line">            root2[i]-&gt;data = root1[i]-&gt;date;</span><br><span class="line">                <span class="built_in">TreeIntoBiTree</span>(root1[i], root2[i]-&gt;lchild, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N<span class="number">-1</span>; i++)</span><br><span class="line">            root2[i]-&gt;rchild = root2[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="built_in">call</span>(root2[<span class="number">0</span>],s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;B;</span><br><span class="line">    Forest myForest;</span><br><span class="line">    myForest.<span class="built_in">PreOrder</span>();</span><br><span class="line">    myForest.<span class="built_in">ForestIntoBiTree</span>();</span><br><span class="line">    myForest.<span class="built_in">cal</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-607】【10分】F-先序-中序还原二叉树"><a href="#【id-607】【10分】F-先序-中序还原二叉树" class="headerlink" title="【id:607】【10分】F. 先序+中序还原二叉树"></a>【id:607】【10分】F. 先序+中序还原二叉树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> *lchild,*rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *<span class="built_in">creatTree</span>(<span class="type">int</span> n,<span class="type">char</span> s1[],<span class="type">char</span> s2[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> *t;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t=(<span class="keyword">struct</span> Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    </span><br><span class="line">    t-&gt;ch=s1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[<span class="number">0</span>]==s2[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            t-&gt;lchild=<span class="built_in">creatTree</span>(i,s1+<span class="number">1</span>,s2);</span><br><span class="line">            t-&gt;rchild=<span class="built_in">creatTree</span>(n-i<span class="number">-1</span>,s1+i+<span class="number">1</span>,s2+i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">(<span class="keyword">struct</span> Node *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="keyword">if</span> (t==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m=<span class="built_in">depth</span>(t-&gt;lchild);</span><br><span class="line">        n=<span class="built_in">depth</span>(t-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span> (m&gt;n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (m+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">return</span> (n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="keyword">struct</span> <span class="title class_">Node</span> *t;</span><br><span class="line">    <span class="type">char</span> s1[<span class="number">50</span>],s2[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;n&gt;&gt;s1&gt;&gt;s2)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="built_in">creatTree</span>(n,s1,s2);</span><br><span class="line">        cout&lt;&lt;<span class="built_in">depth</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊线性表</title>
      <link href="/2023/01/12/%E7%89%B9%E6%AE%8A%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2023/01/12/%E7%89%B9%E6%AE%8A%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-02：栈-amp-amp-队列-amp-amp-串"><a href="#数据结构课内OJ-02：栈-amp-amp-队列-amp-amp-串" class="headerlink" title="数据结构课内OJ 02：栈&amp;&amp;队列&amp;&amp;串"></a>数据结构课内OJ 02：栈&amp;&amp;队列&amp;&amp;串</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="【id-53】【30分】A-DS堆栈–逆序输出（STL栈使用）"><a href="#【id-53】【30分】A-DS堆栈–逆序输出（STL栈使用）" class="headerlink" title="【id:53】【30分】A. DS堆栈–逆序输出（STL栈使用）"></a>【id:53】【30分】A. DS堆栈–逆序输出（STL栈使用）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">int</span> t,len;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str; <span class="comment">//把输入的字符串保存在变量str中</span></span><br><span class="line">        len = str.<span class="built_in">length</span>();  <span class="comment">//获取输入字符串的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            s.<span class="built_in">push</span>(str[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            cout&lt;&lt;s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-55】【20分】B-DS堆栈–行编辑"><a href="#【id-55】【20分】B-DS堆栈–行编辑" class="headerlink" title="【id:55】【20分】B. DS堆栈–行编辑"></a>【id:55】【20分】B. DS堆栈–行编辑</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,len;</span><br><span class="line">    string str;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;s1;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;s2;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;str.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s1.<span class="built_in">empty</span>())s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s1.<span class="built_in">push</span>(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            s2.<span class="built_in">push</span>(s1.<span class="built_in">top</span>());</span><br><span class="line">            s1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                cout&lt;&lt;s2.<span class="built_in">top</span>();</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-56】【20分】C-DS堆栈–括号匹配"><a href="#【id-56】【20分】C-DS堆栈–括号匹配" class="headerlink" title="【id:56】【20分】C. DS堆栈–括号匹配"></a>【id:56】【20分】C. DS堆栈–括号匹配</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt;s;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;str.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;(&#x27;</span> || str[j]==<span class="string">&#x27;[&#x27;</span> || str[j]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                s.<span class="built_in">push</span>(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>)s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[j]==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">top</span>()==<span class="string">&#x27;[&#x27;</span>)s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[j]==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">top</span>()==<span class="string">&#x27;&#123;&#x27;</span>)s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;ok&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-54】【10分】D-DS堆栈–迷宫求解"><a href="#【id-54】【10分】D-DS堆栈–迷宫求解" class="headerlink" title="【id:54】【10分】D. DS堆栈–迷宫求解"></a>【id:54】【10分】D. DS堆栈–迷宫求解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pos</span> &#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">stack&lt;pos&gt; path;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> **ti = <span class="keyword">new</span> <span class="type">int</span>*[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ti[i] = <span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">cin&gt;&gt;ti[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">path.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">ti[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123; </span><br><span class="line"><span class="keyword">if</span>(j + <span class="number">1</span> &lt; n &amp;&amp; ti[i][j+<span class="number">1</span>] == <span class="number">0</span>) &#123; </span><br><span class="line">ti[i][j+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">path.<span class="built_in">push</span>(&#123;i,++j&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i + <span class="number">1</span> &lt; n &amp;&amp; ti[i+<span class="number">1</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">ti[i+<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">path.<span class="built_in">push</span>(&#123;++i,j&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; ti[i][j<span class="number">-1</span>] == <span class="number">0</span>) &#123; </span><br><span class="line">ti[i][j<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">path.<span class="built_in">push</span>(&#123;i,--j&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; ti[i<span class="number">-1</span>][j] == <span class="number">0</span>) &#123;  </span><br><span class="line">ti[i<span class="number">-1</span>][j] = <span class="number">1</span>;</span><br><span class="line">path.<span class="built_in">push</span>(&#123;--i,j&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">path.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!path.<span class="built_in">empty</span>()) &#123; </span><br><span class="line">i = path.<span class="built_in">top</span>().x;</span><br><span class="line">j = path.<span class="built_in">top</span>().y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path.<span class="built_in">empty</span>() || (i == n - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;no path&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stack&lt;pos&gt; p1;</span><br><span class="line"><span class="keyword">while</span>(!path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">p1.<span class="built_in">push</span>(path.<span class="built_in">top</span>());</span><br><span class="line">path.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!p1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> ((++i) % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;[&#x27;</span> &lt;&lt; p1.<span class="built_in">top</span>().x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; p1.<span class="built_in">top</span>().y &lt;&lt; <span class="string">&#x27;]&#x27;</span> &lt;&lt; <span class="string">&quot;--&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;[&#x27;</span> &lt;&lt; p1.<span class="built_in">top</span>().x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; p1.<span class="built_in">top</span>().y &lt;&lt; <span class="string">&#x27;]&#x27;</span> &lt;&lt; <span class="string">&quot;--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">p1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;END&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-642】【10分】E-堆栈操作合法性"><a href="#【id-642】【10分】E-堆栈操作合法性" class="headerlink" title="【id:642】【10分】E. 堆栈操作合法性"></a>【id:642】【10分】E. 堆栈操作合法性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,count,flag=<span class="number">1</span>;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;s;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;str.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(count&gt;m)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                s.<span class="built_in">push</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[j]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( s.<span class="built_in">empty</span>() &amp;&amp;flag==<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-739】【10分】F-【程序填空】表达式计算（栈应用）"><a href="#【id-739】【10分】F-【程序填空】表达式计算（栈应用）" class="headerlink" title="【id:739】【10分】F. 【程序填空】表达式计算（栈应用）"></a>【id:739】【10分】F. 【程序填空】表达式计算（栈应用）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPSETSIZE 7</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Prior[<span class="number">7</span>][<span class="number">7</span>] = &#123; <span class="comment">//运算符间的优先关系</span></span><br><span class="line">    <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27; &#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;=&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> OPSET[OPSETSIZE]=&#123;<span class="string">&#x27;+&#x27;</span> , <span class="string">&#x27;-&#x27;</span> , <span class="string">&#x27;*&#x27;</span> , <span class="string">&#x27;/&#x27;</span> ,<span class="string">&#x27;(&#x27;</span> , <span class="string">&#x27;)&#x27;</span> , <span class="string">&#x27;#&#x27;</span>&#125;; <span class="comment">//运算符集合</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Operate</span><span class="params">(<span class="type">double</span> a, <span class="type">unsigned</span> <span class="type">char</span> theta, <span class="type">double</span> b)</span></span>;<span class="comment">//计算类似a+b的表达式结果</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">In</span><span class="params">(<span class="type">char</span> Test, <span class="type">char</span>* TestOp)</span></span>; <span class="comment">//判断字符Test是否是运算符，是则返回true</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">precede</span><span class="params">(<span class="type">char</span> Aop, <span class="type">char</span> Bop)</span></span>; <span class="comment">//返回两个运算符优先级的比较结果 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下完成算术表达式求值函数EvaluateExpression(string MyExp)的填空</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">EvaluateExpression</span><span class="params">(string MyExp)</span> <span class="comment">//算术表达式求值算法</span></span></span><br><span class="line"><span class="function"><span class="comment">//设OPTR和OPND分别为运算符栈和运算数栈</span></span></span><br><span class="line"><span class="function"><span class="comment">//参数MyExp是表达式字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;stack&lt;<span class="type">char</span>&gt; OPTR;<span class="comment">//运算符栈，字符元素</span></span><br><span class="line">stack&lt;<span class="type">double</span>&gt; OPND;<span class="comment">//运算数栈，实数元素</span></span><br><span class="line"><span class="type">char</span> TempData[<span class="number">20</span>];</span><br><span class="line"><span class="type">double</span> Data,a,b, r;</span><br><span class="line"><span class="type">char</span> theta, c,x,Dr[<span class="number">2</span>];</span><br><span class="line">OPTR.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(TempData,<span class="string">&quot;\0&quot;</span>);</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//表达式字符串的当前字符位置</span></span><br><span class="line">c = MyExp[i];<span class="comment">//表达式字符串的当前字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个读入表达式字符串的字符到变量c，并识别为数值或运算符，做相应处理</span></span><br><span class="line">   <span class="keyword">while</span> (c!= <span class="string">&#x27;#&#x27;</span> || OPTR.<span class="built_in">top</span>()!= <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">In</span>(c, OPSET)) &#123;</span><br><span class="line">            Dr[<span class="number">0</span>]=c;</span><br><span class="line">            Dr[<span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="built_in">strcat</span>(TempData,Dr);</span><br><span class="line">            c=MyExp[++i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">In</span>(c,OPSET)) &#123;</span><br><span class="line">                Data=(<span class="type">float</span>)<span class="built_in">atof</span>(TempData);</span><br><span class="line">                OPND.<span class="built_in">push</span>(Data);</span><br><span class="line">                <span class="built_in">strcpy</span>(TempData,<span class="string">&quot;\0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 不是运算符则进栈</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">precede</span>(OPTR.<span class="built_in">top</span>(), c)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:   <span class="comment">// 栈顶元素优先权低</span></span><br><span class="line">                    OPTR.<span class="built_in">push</span>(c);</span><br><span class="line">                    c=MyExp[++i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:   <span class="comment">// 脱括号并接收下一字符</span></span><br><span class="line">                    x = OPTR.<span class="built_in">top</span>();</span><br><span class="line">                    OPTR.<span class="built_in">pop</span>();</span><br><span class="line">                    c=MyExp[++i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:   <span class="comment">// 退栈并将运算结果入栈</span></span><br><span class="line">                    theta = OPTR.<span class="built_in">top</span>();</span><br><span class="line">                    OPTR.<span class="built_in">pop</span>();</span><br><span class="line">                    b = OPND.<span class="built_in">top</span>();</span><br><span class="line">                    OPND.<span class="built_in">pop</span>();</span><br><span class="line">                    a = OPND.<span class="built_in">top</span>();</span><br><span class="line">                    OPND.<span class="built_in">pop</span>();</span><br><span class="line">                    OPND.<span class="built_in">push</span>(<span class="built_in">Operate</span>(a, theta, b));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="comment">// switch</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// while</span></span><br><span class="line">    <span class="keyword">return</span> OPND.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//这是函数EvaluateExpression的右花括号</span></span><br><span class="line"><span class="comment">//函数EvaluateExpression的代码到此结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下填空完成其他函数的定义，包括函数Operate\函数In\函数precede</span></span><br><span class="line"><span class="comment">//可以参考教材光盘中文件夹CHAP03的源代码ALGO0304.cpp，几乎照抄</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">In</span><span class="params">(<span class="type">char</span> Test, <span class="type">char</span>* TestOp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;OPSETSIZE;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Test==OPSET[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">precede</span><span class="params">(<span class="type">char</span> Aop, <span class="type">char</span> Bop)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;OPSETSIZE;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Aop==OPSET[i])&#123;</span><br><span class="line">            a=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Bop==OPSET[i])&#123;</span><br><span class="line">            b=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Prior[a][b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Operate</span><span class="params">(<span class="type">double</span> a, <span class="type">unsigned</span> <span class="type">char</span> theta, <span class="type">double</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(theta)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> a+b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> a-b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> a*b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> a/b;</span><br><span class="line">        <span class="keyword">default</span> : <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;string Exp;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">double</span> result;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;cin&gt;&gt;Exp;</span><br><span class="line">result=<span class="built_in">EvaluateExpression</span>(Exp);</span><br><span class="line">cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;result&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="【id-59】【30分】A-DS队列之银行排队"><a href="#【id-59】【30分】A-DS队列之银行排队" class="headerlink" title="【id:59】【30分】A. DS队列之银行排队"></a>【id:59】【30分】A. DS队列之银行排队</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,p;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,ca=<span class="number">0</span>,cb=<span class="number">0</span>,cc=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    queue&lt;<span class="type">char</span>&gt;qu;</span><br><span class="line">    <span class="type">char</span> car;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cin&gt;&gt;car;</span><br><span class="line">        qu.<span class="built_in">push</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cin&gt;&gt;p;</span><br><span class="line">        <span class="keyword">if</span>(qu.<span class="built_in">front</span>()==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            ca++;</span><br><span class="line">            a+=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(qu.<span class="built_in">front</span>()==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">            cb++;</span><br><span class="line">            b+=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(qu.<span class="built_in">front</span>()==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            cc++;</span><br><span class="line">            c+=p;</span><br><span class="line">        &#125;</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a/ca&lt;&lt;endl&lt;&lt;b/cb&lt;&lt;endl&lt;&lt;c/cc&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-60】【20分】B-DS队列-堆栈–数制转换"><a href="#【id-60】【20分】B-DS队列-堆栈–数制转换" class="headerlink" title="【id:60】【20分】B. DS队列+堆栈–数制转换"></a>【id:60】【20分】B. DS队列+堆栈–数制转换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,k;</span><br><span class="line">    stack&lt;string&gt;st;</span><br><span class="line">    queue&lt;string&gt;qu;</span><br><span class="line">    <span class="type">double</span> n;</span><br><span class="line">    <span class="type">double</span> yu;</span><br><span class="line">    <span class="type">int</span> zheng;</span><br><span class="line">    string zhi[<span class="number">17</span>]&#123;<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;G&quot;</span>&#125;;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        zheng = (<span class="type">int</span>)n;</span><br><span class="line">        yu = n-zheng;</span><br><span class="line">        <span class="keyword">while</span>(zheng)&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(zhi[zheng%k]);</span><br><span class="line">            zheng /= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(yu)&#123;</span><br><span class="line">            qu.<span class="built_in">push</span>(zhi[<span class="built_in">int</span> (yu*k)]);</span><br><span class="line">            yu = yu*k - <span class="built_in">int</span> (yu*k);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;.&quot;</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                cout&lt;&lt;qu.<span class="built_in">front</span>();</span><br><span class="line">                qu.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-61】【20分】C-DS队列–组队列"><a href="#【id-61】【20分】C-DS队列–组队列" class="headerlink" title="【id:61】【20分】C. DS队列–组队列"></a>【id:61】【20分】C. DS队列–组队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span> **array, <span class="type">int</span> t, <span class="type">int</span> fin)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>; i&lt; t; i++)&#123;</span><br><span class="line"><span class="type">int</span> n= array[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j= <span class="number">1</span>; j&lt;= n; j++)</span><br><span class="line">  <span class="keyword">if</span>(array[i][j]== fin)</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> t;</span><br><span class="line">   cin&gt;&gt;t;</span><br><span class="line">   <span class="type">int</span> **array= <span class="keyword">new</span> <span class="type">int</span>*[t+ <span class="number">5</span>];</span><br><span class="line">   <span class="type">int</span> pos= <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> t1= t;</span><br><span class="line">   <span class="keyword">while</span>(t1--)&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     array[pos++]= <span class="keyword">new</span> <span class="type">int</span>[n+ <span class="number">5</span>];</span><br><span class="line">     <span class="type">int</span> i= <span class="number">0</span>;</span><br><span class="line">     array[pos- <span class="number">1</span>][i++]= n;</span><br><span class="line">     <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">     cin&gt;&gt;array[pos- <span class="number">1</span>][i++];</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   queue&lt;<span class="type">int</span>&gt; *que= <span class="keyword">new</span> queue&lt;<span class="type">int</span>&gt;[t+ <span class="number">3</span>];</span><br><span class="line">   <span class="type">int</span> *order= <span class="keyword">new</span> <span class="type">int</span>[t+  <span class="number">3</span>];</span><br><span class="line">   <span class="type">int</span> order_len= <span class="number">0</span>;</span><br><span class="line">   string operate;</span><br><span class="line">   string bef_operate;</span><br><span class="line">   <span class="type">int</span> flag= <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">while</span>(cin&gt;&gt;operate)&#123;</span><br><span class="line">     <span class="keyword">if</span>(operate== <span class="string">&quot;ENQUEUE&quot;</span>)&#123;</span><br><span class="line">     <span class="type">int</span> shu;</span><br><span class="line">     cin&gt;&gt;shu;</span><br><span class="line">     <span class="type">int</span> p= <span class="built_in">getPos</span>(array, t, shu);</span><br><span class="line">     que[p].<span class="built_in">push</span>(shu);</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="keyword">for</span>( i= <span class="number">0</span>; i&lt; order_len; i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(order[i]== p)</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(i== order_len)&#123;</span><br><span class="line">order[i]= p;</span><br><span class="line">order_len++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(operate== <span class="string">&quot;DEQUEUE&quot;</span>)&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="type">int</span> i= <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(i== order_len)</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">while</span>(que[order[i]].<span class="built_in">empty</span>())</span><br><span class="line">     i++;</span><br><span class="line">   <span class="type">int</span> temp= que[order[i]].<span class="built_in">front</span>();</span><br><span class="line">   que[order[i]].<span class="built_in">pop</span>();</span><br><span class="line">   <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">   cout&lt;&lt;temp; </span><br><span class="line">   flag= <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;temp;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span>(operate== <span class="string">&quot;STOP&quot;</span>)&#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-62】【10分】D-DS栈-队列—排队游戏"><a href="#【id-62】【10分】D-DS栈-队列—排队游戏" class="headerlink" title="【id:62】【10分】D. DS栈+队列—排队游戏"></a>【id:62】【10分】D. DS栈+队列—排队游戏</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;Person&gt;person;</span><br><span class="line">    Person p;</span><br><span class="line">    string group;</span><br><span class="line">    <span class="type">char</span> boy,girl;</span><br><span class="line">    cin&gt;&gt;group;</span><br><span class="line">    boy = group[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(group[i] != boy)&#123;</span><br><span class="line">            girl = group[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;group.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        p.number = i;</span><br><span class="line">        <span class="keyword">if</span>(group[i]==boy)&#123;</span><br><span class="line">            p.sex = <span class="string">&quot;boy&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.sex = <span class="string">&quot;girl&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        person.<span class="built_in">push</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;Person&gt;couple;</span><br><span class="line">    couple.<span class="built_in">push</span>(person.<span class="built_in">front</span>());</span><br><span class="line">    Person wei,tou;</span><br><span class="line">    person.<span class="built_in">pop</span>();</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mapp;</span><br><span class="line">    <span class="keyword">while</span>(!person.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        wei = couple.<span class="built_in">top</span>();</span><br><span class="line">        tou = person.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(tou.sex == wei.sex||couple.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            couple.<span class="built_in">push</span>(tou);</span><br><span class="line">            person.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(wei.sex==<span class="string">&quot;boy&quot;</span>)&#123;</span><br><span class="line">                mapp[tou.number]=wei.number;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mapp[wei.number]=tou.number;</span><br><span class="line">            &#125;</span><br><span class="line">            couple.<span class="built_in">pop</span>();</span><br><span class="line">            person.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = mapp.<span class="built_in">begin</span>();it!=mapp.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        cout&lt;&lt;it-&gt;second&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;first&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-727】【10分】E-银行排队问题之单队列多窗口服务"><a href="#【id-727】【10分】E-银行排队问题之单队列多窗口服务" class="headerlink" title="【id:727】【10分】E. 银行排队问题之单队列多窗口服务"></a>【id:727】【10分】E. 银行排队问题之单队列多窗口服务</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>,M=<span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> n,k,res,maxres,maxs,d[M],s[N],l[N],r[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">        <span class="keyword">if</span>(r[i]&gt;<span class="number">60</span>)r[i]=<span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> f=<span class="number">0</span>,a=<span class="number">-1</span>,b=<span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[j]&lt;=l[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[j]=l[i]+r[i];</span><br><span class="line">                maxs=<span class="built_in">max</span>(maxs,d[j]);</span><br><span class="line">                s[j]++;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b&gt;d[j])</span><br><span class="line">            &#123;</span><br><span class="line">                b=d[j];</span><br><span class="line">                a=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=d[a]-l[i];</span><br><span class="line">            maxres=<span class="built_in">max</span>(maxres,d[a]-l[i]);</span><br><span class="line">            d[a]+=r[i];</span><br><span class="line">            s[a]++;</span><br><span class="line">            maxs=<span class="built_in">max</span>(maxs,d[a]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f %d %d\n&quot;</span>,(<span class="type">double</span>)res/n,maxres,maxs);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-728】【5分】F-银行排队问题之单队列多窗口加VIP服务"><a href="#【id-728】【5分】F-银行排队问题之单队列多窗口加VIP服务" class="headerlink" title="【id:728】【5分】F. 银行排队问题之单队列多窗口加VIP服务"></a>【id:728】【5分】F. 银行排队问题之单队列多窗口加VIP服务</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> time;  </span><br><span class="line"><span class="type">int</span> st;  </span><br><span class="line"><span class="type">int</span> VIP;  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, n2, vip, now_time = <span class="number">0</span>;   </span><br><span class="line">vector &lt;Person&gt; team;  </span><br><span class="line">vector &lt;<span class="type">int</span>&gt; win;  </span><br><span class="line"><span class="type">int</span> win_count[<span class="number">11</span>] = &#123;<span class="number">0</span>&#125;;  </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">Person PP;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;PP.time, &amp;PP.st, &amp;PP.VIP);</span><br><span class="line"><span class="keyword">if</span> (PP.st &gt; <span class="number">60</span>) PP.st = <span class="number">60</span>;  </span><br><span class="line">team.<span class="built_in">push_back</span>(PP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n2, &amp;vip);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">win.<span class="built_in">push_back</span>(<span class="number">0</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> long_time = <span class="number">0</span>;  </span><br><span class="line"><span class="type">int</span> avg_time = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (win[vip] == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)team.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (now_time &gt;= team[i].time) &#123; </span><br><span class="line"><span class="keyword">if</span> (team[i].VIP == <span class="number">1</span>) &#123;</span><br><span class="line">win[vip] += team[i].st; </span><br><span class="line">win_count[vip]++;  </span><br><span class="line">avg_time += (now_time - team[i].time);  </span><br><span class="line"><span class="keyword">if</span> (now_time - team[i].time &gt; long_time) long_time = now_time - team[i].time;  </span><br><span class="line">team.<span class="built_in">erase</span>(team.<span class="built_in">begin</span>() + i);  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;   </span><br><span class="line"><span class="keyword">if</span> (team.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">if</span> (win[i] == <span class="number">0</span>) &#123;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="type">int</span>)team.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (team[j].time &lt;= now_time) &#123;</span><br><span class="line">win[i] += team[j].st;  </span><br><span class="line">win_count[i]++;</span><br><span class="line">avg_time += (now_time - team[j].time);</span><br><span class="line"><span class="keyword">if</span> (now_time - team[j].time &gt; long_time) long_time = now_time - team[j].time;</span><br><span class="line">team.<span class="built_in">erase</span>(team.<span class="built_in">begin</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tag = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (win[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">win[i]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (win[i] &gt; <span class="number">0</span>) tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">now_time++;</span><br><span class="line"><span class="keyword">if</span> (tag == <span class="number">0</span> &amp;&amp; team.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1f %d %d\n&quot;</span>, (avg_time * <span class="number">1.0</span>) / n, long_time, now_time);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, win_count[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-714】【5分】G-德才论"><a href="#【id-714】【5分】G-德才论" class="headerlink" title="【id:714】【5分】G. 德才论"></a>【id:714】【5分】G. 德才论</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> num, de, cai;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((a.de + a.cai) != (b.de + b.cai))</span><br><span class="line">        <span class="keyword">return</span> (a.de + a.cai) &gt; (b.de + b.cai);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.de != b.de)</span><br><span class="line">        <span class="keyword">return</span> a.de &gt; b.de;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, low, high;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;low, &amp;high);</span><br><span class="line">    vector&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node temp;</span><br><span class="line">    <span class="type">int</span> total = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;temp.num, &amp;temp.de, &amp;temp.cai);</span><br><span class="line">        <span class="keyword">if</span> (temp.de &lt; low || temp.cai &lt; low)</span><br><span class="line">            total--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &gt;= high &amp;&amp; temp.cai &gt;= high)</span><br><span class="line">            v[<span class="number">0</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &gt;= high &amp;&amp; temp.cai &lt; high)</span><br><span class="line">            v[<span class="number">1</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &lt; high &amp;&amp; temp.cai &lt; high &amp;&amp; temp.de &gt;= temp.cai)</span><br><span class="line">            v[<span class="number">2</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v[<span class="number">3</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, v[i][j].num, v[i][j].de, v[i][j].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><h3 id="【id-69】【30分】A-DS串应用–KMP算法"><a href="#【id-69】【30分】A-DS串应用–KMP算法" class="headerlink" title="【id:69】【30分】A. DS串应用–KMP算法"></a>【id:69】【30分】A. DS串应用–KMP算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myString</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string mainstr;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(string p,<span class="type">int</span> next[])</span> </span>&#123;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> L = p.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; L; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p[i - <span class="number">1</span>] != p[temp] &amp;&amp; temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                temp = next[temp];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p[i - <span class="number">1</span>] == p[temp]) &#123;</span><br><span class="line">                temp++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">KMPFind</span><span class="params">(string p, <span class="type">int</span> pos, <span class="type">int</span> next[])</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=pos,j=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(mainstr[i] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; p[j] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mainstr[i] == p[j]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span>) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[j] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myString</span>() &#123;size = <span class="number">0</span>; mainstr = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    <span class="built_in">myString</span>(string s) &#123;size = s.<span class="built_in">length</span>(); mainstr = s;&#125;</span><br><span class="line">    ~<span class="built_in">myString</span>() &#123;size = <span class="number">0</span>; mainstr = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetVal</span><span class="params">(string sp)</span> </span>&#123;</span><br><span class="line">        mainstr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        mainstr.<span class="built_in">assign</span>(sp);</span><br><span class="line">        size  = mainstr.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">KMPFindSubstr</span><span class="params">(string p, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> L = p.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> *next = <span class="keyword">new</span> <span class="type">int</span>[L];</span><br><span class="line">        <span class="built_in">GetNext</span>(p,next);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">            cout &lt;&lt; next[i] &lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="type">int</span> v = <span class="number">-1</span>;</span><br><span class="line">        v = <span class="built_in">KMPFind</span>(p, <span class="number">0</span>, next);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">delete</span> [] next;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        string templet;</span><br><span class="line">        cin &gt;&gt; templet;</span><br><span class="line">        string target;</span><br><span class="line">        cin &gt;&gt; target;</span><br><span class="line">         </span><br><span class="line">        <span class="function">myString <span class="title">str</span><span class="params">(templet)</span></span>;</span><br><span class="line">         </span><br><span class="line">        cout &lt;&lt; str.<span class="built_in">KMPFindSubstr</span>(target, <span class="number">0</span>)+<span class="number">1</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-72】【20分】B-DS串应用—最长重复子串"><a href="#【id-72】【20分】B-DS串应用—最长重复子串" class="headerlink" title="【id:72】【20分】B. DS串应用—最长重复子串"></a>【id:72】【20分】B. DS串应用—最长重复子串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">wei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s,t1,t2;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=s.<span class="built_in">size</span>()/<span class="number">2</span>;len&gt;<span class="number">0</span>;len--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>()-len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t1=s.<span class="built_in">substr</span>(i,len);</span><br><span class="line">            t2=s.<span class="built_in">substr</span>(len+i);</span><br><span class="line">            <span class="keyword">if</span>(t2.<span class="built_in">find</span>(t1)!=string::npos)</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">wei</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-70】【20分】C-DS串应用–串替换"><a href="#【id-70】【20分】C-DS串应用–串替换" class="headerlink" title="【id:70】【20分】C. DS串应用–串替换"></a>【id:70】【20分】C. DS串应用–串替换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> nextt[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_next</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> len=a.<span class="built_in">length</span>();</span><br><span class="line">    nextt[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||a[i]==a[k])</span><br><span class="line">        &#123;</span><br><span class="line">            i++,k++;</span><br><span class="line">            nextt[i]=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> k=nextt[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string a,string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len=a.<span class="built_in">length</span>(),len1=b.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">Get_next</span>(b);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])i++,j++;</span><br><span class="line">        <span class="keyword">else</span> j=nextt[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==len1)<span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ma,su,re;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;ma&gt;&gt;su&gt;&gt;re;</span><br><span class="line">        cout&lt;&lt;ma&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> m=<span class="built_in">KMP</span>(ma,su);</span><br><span class="line">        <span class="keyword">if</span>(m!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ma.<span class="built_in">erase</span>(m,su.<span class="built_in">length</span>());</span><br><span class="line">            ma.<span class="built_in">insert</span>(m,re);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ma&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-71】【10分】D-串应用-计算一个串的最长的真前后缀"><a href="#【id-71】【10分】D-串应用-计算一个串的最长的真前后缀" class="headerlink" title="【id:71】【10分】D. 串应用- 计算一个串的最长的真前后缀"></a>【id:71】【10分】D. 串应用- 计算一个串的最长的真前后缀</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">compare</span><span class="params">(string qian,string hou)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=qian.<span class="built_in">length</span>();</span><br><span class="line">    string qzi,hzi;</span><br><span class="line">    <span class="keyword">while</span>(j)&#123;</span><br><span class="line">        qzi=qian.<span class="built_in">substr</span>(<span class="number">0</span>,j);</span><br><span class="line">        hzi=hou.<span class="built_in">substr</span>(qian.<span class="built_in">length</span>()-j,j);</span><br><span class="line">        <span class="keyword">if</span>(qzi==hzi)<span class="keyword">return</span> qzi;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;empty&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,len;</span><br><span class="line">    string s,qian,hou;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        len=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;empty&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        qian=s.<span class="built_in">substr</span>(<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">        hou=s.<span class="built_in">substr</span>(<span class="number">1</span>,len<span class="number">-1</span>);</span><br><span class="line">        string r=<span class="built_in">compare</span>(qian,hou);</span><br><span class="line">        cout&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-73】【10分】E-子串循环问题-Ver-I"><a href="#【id-73】【10分】E-子串循环问题-Ver-I" class="headerlink" title="【id:73】【10分】E. 子串循环问题 (Ver. I)"></a>【id:73】【10分】E. 子串循环问题 (Ver. I)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetNext</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string t1, t2;</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t1 = a.<span class="built_in">substr</span>(<span class="number">0</span>, i+<span class="number">1</span>);</span><br><span class="line">        t2 = a.<span class="built_in">substr</span>(len<span class="number">-1</span>-i);</span><br><span class="line">        <span class="keyword">if</span>(t1==t2 &amp;&amp; i+<span class="number">1</span>&gt;j)</span><br><span class="line">            j = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        <span class="type">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> next_len = <span class="built_in">GetNext</span>(a);</span><br><span class="line">        <span class="type">int</span> L = len-next_len;</span><br><span class="line">        <span class="keyword">if</span>(!(len%L) &amp;&amp; len!=L)</span><br><span class="line">            cout&lt;&lt;<span class="string">&#x27;0&#x27;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;L-len%L&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-74】【10分】F-可重叠子串-Ver-I"><a href="#【id-74】【10分】F-可重叠子串-Ver-I" class="headerlink" title="【id:74】【10分】F. 可重叠子串 (Ver. I)"></a>【id:74】【10分】F. 可重叠子串 (Ver. I)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> nextt[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_next</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> len=a.<span class="built_in">length</span>();</span><br><span class="line">    nextt[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||a[i]==a[k])</span><br><span class="line">        &#123;</span><br><span class="line">            i++,k++;</span><br><span class="line">            nextt[i]=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> k=nextt[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string a,string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len=a.<span class="built_in">length</span>(),len1=b.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">Get_next</span>(b);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])i++,j++;</span><br><span class="line">        <span class="keyword">else</span> j=nextt[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==len1)<span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t0,t,count=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;t0;</span><br><span class="line">    string s,str;</span><br><span class="line">    <span class="keyword">while</span>(t0--)&#123;</span><br><span class="line">        cin&gt;&gt;s&gt;&gt;t;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            cin&gt;&gt;str;</span><br><span class="line">            <span class="type">int</span> m=<span class="built_in">KMP</span>(s,str);</span><br><span class="line">            string sa=s;</span><br><span class="line">            <span class="keyword">while</span>(m!=<span class="number">-1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                sa=sa.<span class="built_in">substr</span>(m+<span class="number">1</span>);</span><br><span class="line">                m=<span class="built_in">KMP</span>(sa,str);</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;str&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2023/01/11/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/01/11/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构课内OJ-01：线性表-顺序表-amp-amp-链表"><a href="#数据结构课内OJ-01：线性表-顺序表-amp-amp-链表" class="headerlink" title="数据结构课内OJ 01：线性表:顺序表&amp;&amp;链表"></a>数据结构课内OJ 01：线性表:顺序表&amp;&amp;链表</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="【id-737】【30分】A-【程序填空】顺序表类定义"><a href="#【id-737】【30分】A-【程序填空】顺序表类定义" class="headerlink" title="【id:737】【30分】A. 【程序填空】顺序表类定义"></a>【id:737】【30分】A. 【程序填空】顺序表类定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序表类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> *list;<span class="comment">//元素数组</span></span><br><span class="line"><span class="type">int</span> maxsize;<span class="comment">//顺序表最大长度</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//顺序表实际长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">SeqList</span>();<span class="comment">//析构函数</span></span><br><span class="line"><span class="comment">//顺序表其他操作</span></span><br><span class="line"><span class="built_in">SeqList</span>(<span class="type">int</span> max=<span class="number">0</span>);<span class="comment">//构造函数，动态创建顺序表，设置顺序表最大长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> item, <span class="type">int</span> i)</span></span>;<span class="comment">//插入一个元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DEL</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//删除一个元素，返回删除的元素值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_i</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//返回第i位置元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;<span class="comment">//打印顺序表所有数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SeqList::~<span class="built_in">SeqList</span>()<span class="comment">//析构函数</span></span><br><span class="line">&#123;<span class="keyword">delete</span> []list;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成其他顺序表函数和主函数</span></span><br><span class="line">SeqList::<span class="built_in">SeqList</span>(<span class="type">int</span> max ) &#123;</span><br><span class="line"> cin &gt;&gt; max;</span><br><span class="line"> size = max;</span><br><span class="line"> maxsize = <span class="number">1000</span>;</span><br><span class="line"> list=<span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">  cin &gt;&gt; *(list + i);</span><br><span class="line">  cout &lt;&lt; *(list + i);</span><br><span class="line">  <span class="keyword">if</span> (i != size - <span class="number">1</span>)cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//size实际大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::Insert</span><span class="params">(<span class="type">int</span> item, <span class="type">int</span> i)</span> </span>&#123;<span class="comment">//位置&amp;&amp;数据</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> ((item - <span class="number">1</span> &lt; <span class="number">0</span>) || (item - <span class="number">1</span>) &gt; size) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> iu = size - <span class="number">1</span>; iu &gt; item - <span class="number">1</span>; iu--) &#123;</span><br><span class="line">   *(list + iu) = *(list + iu - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *(list + item - <span class="number">1</span>) = i;</span><br><span class="line">  <span class="built_in">print</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::DEL</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ((i - <span class="number">1</span> &lt; <span class="number">0</span>) || (i - <span class="number">1</span> &gt; size - <span class="number">1</span>)) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> iu = i - <span class="number">1</span>; iu &lt; size - <span class="number">1</span>; iu++) &#123;</span><br><span class="line">   *(list + iu) = *(list + iu + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  size--;</span><br><span class="line">  <span class="built_in">print</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::get_i</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ((i - <span class="number">1</span> &lt; <span class="number">0</span>) || (i - <span class="number">1</span> &gt; size - <span class="number">1</span>)) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  cout&lt;&lt; *(list + i - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SeqList::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> iu = <span class="number">0</span>; iu &lt; size ; iu++) &#123;</span><br><span class="line">  cout &lt;&lt; *(list + iu);</span><br><span class="line">  <span class="keyword">if</span> (iu != size - <span class="number">1</span>)cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> SeqList test;</span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> a, b;</span><br><span class="line"> cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"> test.<span class="built_in">Insert</span>(a,b);</span><br><span class="line"> </span><br><span class="line"> cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"> test.<span class="built_in">Insert</span>(a, b);</span><br><span class="line"> </span><br><span class="line"> cin &gt;&gt; a;</span><br><span class="line"> test.<span class="built_in">DEL</span>(a); </span><br><span class="line"> cin &gt;&gt; a;</span><br><span class="line"> test.<span class="built_in">DEL</span>(a); </span><br><span class="line"> cin &gt;&gt; a;</span><br><span class="line"> test.<span class="built_in">get_i</span>(a); </span><br><span class="line"> cin &gt;&gt; a;</span><br><span class="line"> test.<span class="built_in">get_i</span>(a);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【id-29】【20分】B-DS顺序表–连续操作"><a href="#【id-29】【20分】B-DS顺序表–连续操作" class="headerlink" title="【id:29】【20分】B. DS顺序表–连续操作"></a>【id:29】【20分】B. DS顺序表–连续操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span>&#123;</span><br><span class="line">    <span class="type">int</span> *list;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> maxLen;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SeqList</span>(<span class="type">int</span> n);</span><br><span class="line">    ~<span class="built_in">SeqList</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">multiInsert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">int</span> *item)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">multiDel</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SeqList::<span class="built_in">SeqList</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    maxLen = <span class="number">1000</span>;</span><br><span class="line">    len = n;</span><br><span class="line">    list = <span class="keyword">new</span> <span class="type">int</span>[maxLen];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;list[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SeqList::~<span class="built_in">SeqList</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> []list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SeqList::multiInsert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">int</span> *item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len+n&gt;maxLen || i&lt;<span class="number">1</span> || i&gt;len+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=len<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line">        list[j+n] = list[j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&lt;i<span class="number">-1</span>+n;j++)</span><br><span class="line">        list[j] = item[j-i+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    len += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SeqList::multiDel</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;len || i+n<span class="number">-1</span>&gt;len)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>+n;j&lt;len;j++)</span><br><span class="line">        list[j-n] = list[j];</span><br><span class="line"></span><br><span class="line">    len -= n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SeqList::outPut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;len&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        cout&lt;&lt;list[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">SeqList <span class="title">myList</span><span class="params">(n)</span></span>;</span><br><span class="line">    myList.<span class="built_in">outPut</span>();</span><br><span class="line">    <span class="type">int</span> i,*item;</span><br><span class="line">    cin&gt;&gt;i&gt;&gt;n;</span><br><span class="line">    item = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        cin&gt;&gt;item[j];</span><br><span class="line">    myList.<span class="built_in">multiInsert</span>(i,n,item);</span><br><span class="line">    myList.<span class="built_in">outPut</span>();</span><br><span class="line">    <span class="keyword">delete</span> []item;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;i&gt;&gt;n;</span><br><span class="line">    myList.<span class="built_in">multiDel</span>(i,n);</span><br><span class="line">    myList.<span class="built_in">outPut</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="【id-30】【20分】C-DS顺序表–合并操作"><a href="#【id-30】【20分】C-DS顺序表–合并操作" class="headerlink" title="【id:30】【20分】C. DS顺序表–合并操作"></a>【id:30】【20分】C. DS顺序表–合并操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="keyword">error</span> -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ok 0</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* list;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SeqList</span>();</span><br><span class="line"><span class="built_in">SeqList</span>(<span class="type">int</span>* data, <span class="type">int</span> size);</span><br><span class="line">~<span class="built_in">SeqList</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">list_size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">list_insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> item)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">list_delete</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">list_get</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiinsert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">int</span> item[])</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multidelete</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">list_union</span><span class="params">(SeqList&amp; rhs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">list_display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SeqList::<span class="built_in">SeqList</span>()</span><br><span class="line">&#123;</span><br><span class="line">maxsize = <span class="number">1000</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">list = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SeqList::<span class="built_in">SeqList</span>(<span class="type">int</span>* data, <span class="type">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">maxsize = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;size = size;</span><br><span class="line">list = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">list[i] = data[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SeqList::~<span class="built_in">SeqList</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::list_size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::list_insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; size + <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> q = &amp;list[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = &amp;list[size - <span class="number">1</span>]; p &gt;= q; p--)</span><br><span class="line">*(p + <span class="number">1</span>) = *p;</span><br><span class="line">*q = item;</span><br><span class="line">size++;</span><br><span class="line"><span class="built_in">list_display</span>();</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::list_delete</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; size + <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> q = &amp;list[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (; q &lt;= &amp;list[size - <span class="number">1</span>]; q++)</span><br><span class="line">*q = *(q + <span class="number">1</span>);</span><br><span class="line">list[size - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">size--;</span><br><span class="line"><span class="built_in">list_display</span>();</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::list_get</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; size + <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; list[i - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::multiinsert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">int</span> item[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; size + <span class="number">1</span> || size + n &gt; maxsize) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> q = &amp;list[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = &amp;list[size - <span class="number">1</span>]; p &gt;= q; p--)</span><br><span class="line">*(p + n) = *p;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">*q = item[j];</span><br><span class="line">q++;</span><br><span class="line">&#125;</span><br><span class="line">size += n;</span><br><span class="line"><span class="built_in">list_display</span>();</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::multidelete</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; size + <span class="number">1</span> || size - n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> q = &amp;list[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (; q &lt;= &amp;list[size - <span class="number">1</span>]; q++)</span><br><span class="line">*q = *(q + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">list[size - j - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">size -= n;</span><br><span class="line"><span class="built_in">list_display</span>();</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::list_union</span><span class="params">(SeqList&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rhs.size; i++) &#123;</span><br><span class="line">list[size + i] = rhs.list[i];</span><br><span class="line">&#125;</span><br><span class="line">size += rhs.size;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; size - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (list[j - <span class="number">1</span>] &gt; list[j])</span><br><span class="line"><span class="built_in">swap</span>(list[j - <span class="number">1</span>], list[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list_display</span>();</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SeqList::list_display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; size;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; list[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, data;</span><br><span class="line"><span class="type">int</span> i, item;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span>* Vecdata = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; Vecdata[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SeqList <span class="title">list1</span><span class="params">(Vecdata, n)</span></span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">delete</span>[]Vecdata;</span><br><span class="line">Vecdata = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; Vecdata[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SeqList <span class="title">list2</span><span class="params">(Vecdata, n)</span></span>;</span><br><span class="line">list1.<span class="built_in">list_union</span>(list2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-31】【10分】D-DS顺序表之循环移位"><a href="#【id-31】【10分】D-DS顺序表之循环移位" class="headerlink" title="【id:31】【10分】D. DS顺序表之循环移位"></a>【id:31】【10分】D. DS顺序表之循环移位</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> *a;</span><br><span class="line">    <span class="type">int</span> *b;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    a = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    b = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dir1,pos1;</span><br><span class="line">    cin&gt;&gt;dir1&gt;&gt;pos1;</span><br><span class="line">    <span class="keyword">if</span>(dir1==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=pos1;i&lt;n;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pos1;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-pos1;i&lt;n;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-pos1;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> dir2,pos2;</span><br><span class="line">    cin&gt;&gt;dir2&gt;&gt;pos2;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(dir2==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=pos2;i&lt;n;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pos2;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-pos2;i&lt;n;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-pos2;i++)</span><br><span class="line">            b[k++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="【id-714】【10分】E-德才论"><a href="#【id-714】【10分】E-德才论" class="headerlink" title="【id:714】【10分】E. 德才论"></a>【id:714】【10分】E. 德才论</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> num, de, cai;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((a.de + a.cai) != (b.de + b.cai))</span><br><span class="line">        <span class="keyword">return</span> (a.de + a.cai) &gt; (b.de + b.cai);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.de != b.de)</span><br><span class="line">        <span class="keyword">return</span> a.de &gt; b.de;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, low, high;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;low, &amp;high);</span><br><span class="line">    vector&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node temp;</span><br><span class="line">    <span class="type">int</span> total = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;temp.num, &amp;temp.de, &amp;temp.cai);</span><br><span class="line">        <span class="keyword">if</span> (temp.de &lt; low || temp.cai &lt; low)</span><br><span class="line">            total--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &gt;= high &amp;&amp; temp.cai &gt;= high)</span><br><span class="line">            v[<span class="number">0</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &gt;= high &amp;&amp; temp.cai &lt; high)</span><br><span class="line">            v[<span class="number">1</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.de &lt; high &amp;&amp; temp.cai &lt; high &amp;&amp; temp.de &gt;= temp.cai)</span><br><span class="line">            v[<span class="number">2</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v[<span class="number">3</span>].<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, v[i][j].num, v[i][j].de, v[i][j].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="【id-644】【10分】F-最长连续递增子序列"><a href="#【id-644】【10分】F-最长连续递增子序列" class="headerlink" title="【id:644】【10分】F. 最长连续递增子序列"></a>【id:644】【10分】F. 最长连续递增子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,count=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> list[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;list[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;list[j]&gt;list[j<span class="number">-1</span>];j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j-i&gt;count)&#123;</span><br><span class="line">                count=j-i;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;list[k];</span><br><span class="line">    k++;</span><br><span class="line">    <span class="keyword">while</span>(count--)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;list[k];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="【id-738】【30分】A-【程序填空】单链表类定义"><a href="#【id-738】【30分】A-【程序填空】单链表类定义" class="headerlink" title="【id:738】【30分】A. 【程序填空】单链表类定义"></a>【id:738】【30分】A. 【程序填空】单链表类定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">ListNode * next;</span><br><span class="line"><span class="built_in">ListNode</span>()</span><br><span class="line">&#123;data=<span class="number">-9999</span>, next = <span class="literal">NULL</span>;&#125;</span><br><span class="line"><span class="built_in">ListNode</span>(<span class="type">int</span> item, ListNode* pt)</span><br><span class="line">&#123;data=item, next=pt;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span> &#123;</span><br><span class="line"><span class="comment">//带头结点的单链表，位置从0到n，0是头结点，1是首结点，n是尾结点</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ListNode * head; <span class="comment">//头结点</span></span><br><span class="line"><span class="type">int</span> size; <span class="comment">//表长</span></span><br><span class="line"><span class="function">ListNode * <span class="title">index</span><span class="params">(<span class="type">int</span> i)</span></span>; <span class="comment">//定位函数，返回第i个结点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">LinkList</span>();<span class="comment">//构造函数，创建头结点</span></span><br><span class="line">~<span class="built_in">LinkList</span>();<span class="comment">//析构函数，逐个结点回收</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LL_insert</span><span class="params">(<span class="type">int</span> item, <span class="type">int</span> i)</span></span>;<span class="comment">//第i位置插入元素，操作成功或失败返回OK或ERROR</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LL_del</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//删除第i位置的元素，操作成功或失败返回OK或ERROR</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LL_get</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//获取位置i的元素的数值，操作成功或失败返回OK或ERROR</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_print</span><span class="params">()</span></span>;<span class="comment">//打印单链表所有数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//提示：index函数可以不使用。如果不用要在填空区域定义一个空函数体保证语法正确性</span></span><br><span class="line"></span><br><span class="line">LinkList::<span class="built_in">LinkList</span>(): <span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();&#125;</span><br><span class="line"></span><br><span class="line">LinkList::~<span class="built_in">LinkList</span>()<span class="comment">//要逐个结点回收</span></span><br><span class="line">&#123;ListNode *p, *q;</span><br><span class="line">p=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">q=p; p=p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下完成其他类函数定义</span></span><br><span class="line"><span class="comment">/********** Write your code here! **********/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::LL_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* p;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;   </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;p-&gt;data;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; p-&gt;data ;</span><br><span class="line">        &#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList::LL_insert</span><span class="params">(<span class="type">int</span> item, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;size + <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">ListNode* cur, * pre=head, * now;</span><br><span class="line">cur = head-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">1</span>; q &lt; i; q++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">now = <span class="keyword">new</span> ListNode;</span><br><span class="line">now-&gt;data = item;</span><br><span class="line">pre-&gt;next = now;</span><br><span class="line">now-&gt;next = cur;</span><br><span class="line">size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList::LL_del</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;size) <span class="keyword">return</span> ERROR;</span><br><span class="line">ListNode* cur, * pre = head, * now;</span><br><span class="line">cur = head-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">1</span>; q &lt; i; q++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = cur-&gt;next;</span><br><span class="line">size--;</span><br><span class="line"><span class="comment">//delete cur;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList::LL_get</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;size) <span class="keyword">return</span> ERROR;</span><br><span class="line">ListNode* cur, * pre = head, * now;</span><br><span class="line">cur = head-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">1</span>; q &lt; i; q++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************/</span></span><br><span class="line"><span class="comment">//主函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> i, t, temp, pos;</span><br><span class="line">LinkList sl;<span class="comment">//创建单链表</span></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line">cin&gt;&gt;t;<span class="comment">//输入初始长度</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=t; i++) </span><br><span class="line">&#123;cin&gt;&gt;temp;sl.<span class="built_in">LL_insert</span>(temp, i);&#125;</span><br><span class="line">sl.<span class="built_in">LL_print</span>();</span><br><span class="line"><span class="comment">//两次插入</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) </span><br><span class="line">&#123;cin&gt;&gt;pos&gt;&gt;temp;</span><br><span class="line">t=sl.<span class="built_in">LL_insert</span>(temp, pos);</span><br><span class="line"><span class="keyword">if</span> (t==ERROR) cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> sl.<span class="built_in">LL_print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两次删除</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) </span><br><span class="line">&#123;cin&gt;&gt;pos;</span><br><span class="line">t=sl.<span class="built_in">LL_del</span>(pos);</span><br><span class="line"><span class="keyword">if</span> (t==ERROR) cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> sl.<span class="built_in">LL_print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两次查找</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) </span><br><span class="line">&#123;cin&gt;&gt;pos;</span><br><span class="line">t=sl.<span class="built_in">LL_get</span>(pos);</span><br><span class="line"><span class="keyword">if</span> (t==ERROR) cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-33】【20分】B-DS单链表–结点交换"><a href="#【id-33】【20分】B-DS单链表–结点交换" class="headerlink" title="【id:33】【20分】B. DS单链表–结点交换"></a>【id:33】【20分】B. DS单链表–结点交换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode *head;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="built_in">LinkList</span>();</span><br><span class="line">    ~<span class="built_in">LinkList</span>();</span><br><span class="line">    <span class="function">ListNode * <span class="title">Index</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateList</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkList::<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> ListNode;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList::~<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ListNode *p = head;</span><br><span class="line">    ListNode *q;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode * <span class="title">LinkList::Index</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode *p = head;</span><br><span class="line">    <span class="keyword">while</span>(i--)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::CreateList</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode *p = head;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        ListNode *q = <span class="keyword">new</span> ListNode;</span><br><span class="line">        q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        cin&gt;&gt;q-&gt;data;</span><br><span class="line">        p-&gt;next = q;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    L.<span class="built_in">CreateList</span>(n);</span><br><span class="line">    L.<span class="built_in">Display</span>();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">1</span>||a&gt;n||b&lt;<span class="number">1</span>||b&gt;n)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *p = L.<span class="built_in">Index</span>(a<span class="number">-1</span>);</span><br><span class="line">        ListNode *q = p-&gt;next;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        ListNode *r = L.<span class="built_in">Index</span>(b<span class="number">-2</span>);</span><br><span class="line">        ListNode *s = r-&gt;next;</span><br><span class="line">        r-&gt;next = s-&gt;next;</span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        q-&gt;next = r-&gt;next;</span><br><span class="line">        r-&gt;next = q;</span><br><span class="line">        L.<span class="built_in">Display</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-34】【20分】C-DS单链表–合并"><a href="#【id-34】【20分】C-DS单链表–合并" class="headerlink" title="【id:34】【20分】C. DS单链表–合并"></a>【id:34】【20分】C. DS单链表–合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    LNode *next;</span><br><span class="line">    <span class="built_in">LNode</span>()&#123;next=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>&#123;</span><br><span class="line">    LNode *head;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkList</span>();</span><br><span class="line">    ~<span class="built_in">LinkList</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">CreateInTail</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">LinkList <span class="title">merge</span><span class="params">(LinkList &amp;li)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkList::<span class="built_in">LinkList</span>()&#123;</span><br><span class="line">    head = <span class="keyword">new</span> LNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList::~<span class="built_in">LinkList</span>()&#123;</span><br><span class="line">    LNode *p = head,*q;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::CreateInTail</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    len = n;</span><br><span class="line">    LNode *tail=head;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> item;</span><br><span class="line">        cin&gt;&gt;item;</span><br><span class="line">        LNode *s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data=item;</span><br><span class="line">        tail-&gt;next=s;</span><br><span class="line">        tail=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::outPut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode *p=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">LinkList::merge</span><span class="params">(LinkList &amp;li)</span></span>&#123;</span><br><span class="line">    LinkList temp;</span><br><span class="line">    temp.len = len+li.len;</span><br><span class="line">    LNode *p = head-&gt;next,*q=li.head-&gt;next,*r=temp.head;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;q)&#123;</span><br><span class="line">        LNode *s=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &lt; q-&gt;data)&#123;</span><br><span class="line">            s-&gt;data=p-&gt;data;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s-&gt;data=q-&gt;data;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r=r-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        LNode *s=<span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data=p-&gt;data;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r=r-&gt;next;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q)&#123;</span><br><span class="line">        LNode *s=<span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data=q-&gt;data;</span><br><span class="line">        r-&gt;next =s;</span><br><span class="line">        r=r-&gt;next;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    LinkList firstList;</span><br><span class="line">    firstList.<span class="built_in">CreateInTail</span>(n);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    LinkList secondList;</span><br><span class="line">    secondList.<span class="built_in">CreateInTail</span>(m);</span><br><span class="line">    LinkList thirdList=firstList.<span class="built_in">merge</span>(secondList);</span><br><span class="line">    thirdList.<span class="built_in">outPut</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-35】【10分】D-DS线性表—多项式相加"><a href="#【id-35】【10分】D-DS线性表—多项式相加" class="headerlink" title="【id:35】【10分】D. DS线性表—多项式相加"></a>【id:35】【10分】D. DS线性表—多项式相加</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="keyword">error</span> -1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data,index;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>()&#123;next = <span class="literal">NULL</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode *head;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LinkList</span>();</span><br><span class="line">    ~<span class="built_in">LinkList</span>();</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">LL_new</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> a,<span class="type">int</span> ind)</span></span>&#123;</span><br><span class="line">        ListNode *n = <span class="keyword">new</span> ListNode;</span><br><span class="line">        n-&gt; data = a;</span><br><span class="line">        n-&gt;index = ind;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(--i)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p-&gt;next = n;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">LL_display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(LinkList &amp;l)</span></span>&#123;</span><br><span class="line">        ListNode *p=head-&gt;next,*q=l.head-&gt;next,*pre = head;</span><br><span class="line">        <span class="keyword">while</span>(p !=<span class="literal">NULL</span> &amp;&amp; q!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;index==q-&gt;index)&#123;</span><br><span class="line">                p-&gt;data+=q-&gt;data;</span><br><span class="line">                ListNode *temp = q;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;data==<span class="number">0</span>)&#123;</span><br><span class="line">                    p=p-&gt;next;</span><br><span class="line">                    <span class="keyword">delete</span> pre-&gt;next;</span><br><span class="line">                    pre-&gt;next = p;</span><br><span class="line">                    q = q-&gt;next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p=p-&gt;next;</span><br><span class="line">                    q=q-&gt;next;</span><br><span class="line">                    pre = pre-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;index &gt; q-&gt;index)&#123;</span><br><span class="line">                pre-&gt;next = q;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">                pre-&gt;next-&gt;next = p;</span><br><span class="line">                pre = pre-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = pre-&gt;next;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pre-&gt;next = q;</span><br><span class="line">        &#125;</span><br><span class="line">        l.head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkList::<span class="built_in">LinkList</span>()&#123;</span><br><span class="line">    head= <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList::~<span class="built_in">LinkList</span>()&#123;</span><br><span class="line">    ListNode *p,*q;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="keyword">while</span>(p !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> q ;</span><br><span class="line">    &#125;</span><br><span class="line">    head=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> LinkList ::<span class="built_in">LL_display</span>()&#123;</span><br><span class="line">    ListNode *p = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p!= head-&gt;next)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot; + &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data == <span class="number">0</span>)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;data&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;p-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;x^&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;(&quot;</span> &lt;&lt; p-&gt;index&lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;p-&gt;index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,a,index;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        LinkList l1,l2;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;index;</span><br><span class="line">            l1.<span class="built_in">LL_new</span>(i,a,index);</span><br><span class="line">        &#125;</span><br><span class="line">        l1.<span class="built_in">LL_display</span>();</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;index;</span><br><span class="line">            l2.<span class="built_in">LL_new</span>(i,a,index);</span><br><span class="line">        &#125;</span><br><span class="line">        l2.<span class="built_in">LL_display</span>();</span><br><span class="line"></span><br><span class="line">        l1.<span class="built_in">add</span>(l2);</span><br><span class="line">        l1.<span class="built_in">LL_display</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="【id-43】【10分】F-DS双向链表—祖玛"><a href="#【id-43】【10分】F-DS双向链表—祖玛" class="headerlink" title="【id:43】【10分】F. DS双向链表—祖玛"></a>【id:43】【10分】F. DS双向链表—祖玛</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s,c,a,b;</span><br><span class="line">    <span class="type">int</span> num,n,flag=<span class="number">0</span>,j,r;</span><br><span class="line">    cin&gt;&gt;s&gt;&gt;num;</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line">        s.<span class="built_in">insert</span>(n,c);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                j=<span class="number">1</span>;</span><br><span class="line">                r=i;</span><br><span class="line">                <span class="keyword">while</span>(s[r]==s[r+<span class="number">1</span>])&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">3</span>&amp;&amp;s.<span class="built_in">length</span>()==<span class="number">3</span>)&#123;</span><br><span class="line">                    s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=<span class="number">3</span>&amp;&amp;s.<span class="built_in">length</span>()&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                    s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()+i,s.<span class="built_in">begin</span>()+i+j);</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(flag);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> 数据结构 </category>
          
          <category> dsOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计科课内 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始创建我的个人网站！</title>
      <link href="/2023/01/10/%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%81/"/>
      <url>/2023/01/10/%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>#尝试<br>别摸鱼了快学</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/01/hello-world/"/>
      <url>/2023/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
